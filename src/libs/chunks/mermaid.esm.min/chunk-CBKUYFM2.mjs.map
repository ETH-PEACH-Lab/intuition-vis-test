{
  "version": 3,
  "sources": ["../../../../parser/dist/mermaid-parser.core.mjs"],
  "sourcesContent": ["import {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-DSFTZ5EX.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-YLDOD45B.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-XOGJJXJ2.mjs\";\nimport {\n  ArrayModule,\n  createArrayServices\n} from \"./chunks/mermaid-parser.core/chunk-3LEGZ2RS.mjs\";\nimport {\n  VisualDiagramModule,\n  createVisualDiagramServices\n} from \"./chunks/mermaid-parser.core/chunk-CC4EFZWR.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArrayDiagram,\n  ArrayDiagramGeneratedModule,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  Info,\n  InfoGeneratedModule,\n  MatrixDiagram,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  TestSlidesDiagram,\n  VisSlidesDiagram,\n  VisualDiagram,\n  __name,\n  isArrayDiagram,\n  isCommon,\n  isInfo,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection\n} from \"./chunks/mermaid-parser.core/chunk-6DQHAYCQ.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-PENNABTY.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers[\"info\"] = parser;\n  },\n  packet: async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-VFNCKY6S.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers[\"packet\"] = parser;\n  },\n  pie: async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-FLBUETGR.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers[\"pie\"] = parser;\n  },\n  array: async () => {\n    const { createArrayServices: createArrayServices2 } = await import(\"./chunks/mermaid-parser.core/array-FXG3FKDE.mjs\");\n    const parser = createArrayServices2().Array.parser.LangiumParser;\n    parsers[\"array\"] = parser;\n  },\n  matrix: async () => {\n    const { createMatrixServices } = await import(\"./chunks/mermaid-parser.core/matrix-LV6Q67KG.mjs\");\n    const parser = createMatrixServices().Matrix.parser.LangiumParser;\n    parsers[\"matrix\"] = parser;\n  },\n  testslides: async () => {\n    const { createTestSlidesServices } = await import(\"./chunks/mermaid-parser.core/testslides-FRBGVUTS.mjs\");\n    const parser = createTestSlidesServices().TestSlides.parser.LangiumParser;\n    parsers[\"testslides\"] = parser;\n  },\n  visslides: async () => {\n    const { createVisSlidesServices } = await import(\"./chunks/mermaid-parser.core/visslides-SYG3E36N.mjs\");\n    const parser = createVisSlidesServices().VisSlides.parser.LangiumParser;\n    parsers[\"visslides\"] = parser;\n  },\n  visual: async () => {\n    const { createVisualDiagramServices: createVisualDiagramServices2 } = await import(\"./chunks/mermaid-parser.core/visual-2EPL7QU3.mjs\");\n    const parser = createVisualDiagramServices2().VisualDiagram.parser.LangiumParser;\n    parsers[\"visual\"] = parser;\n  }\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArrayDiagram,\n  ArrayDiagramGeneratedModule,\n  ArrayModule,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  MatrixDiagram,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  TestSlidesDiagram,\n  VisSlidesDiagram,\n  VisualDiagram,\n  VisualDiagramModule,\n  createArrayServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  createVisualDiagramServices,\n  isArrayDiagram,\n  isCommon,\n  isInfo,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  parse\n};\n"],
  "mappings": "kFAmDA,IAAIA,EAAU,CAAC,EACXC,EAAe,CACjB,KAAM,SAAY,CAChB,GAAM,CAAE,mBAAoBC,CAAoB,EAAI,KAAM,QAAO,8BAAgD,EAC3GC,EAASD,EAAoB,EAAE,KAAK,OAAO,cACjDF,EAAQ,KAAUG,CACpB,EACA,OAAQ,SAAY,CAClB,GAAM,CAAE,qBAAsBC,CAAsB,EAAI,KAAM,QAAO,gCAAkD,EACjHD,EAASC,EAAsB,EAAE,OAAO,OAAO,cACrDJ,EAAQ,OAAYG,CACtB,EACA,IAAK,SAAY,CACf,GAAM,CAAE,kBAAmBE,CAAmB,EAAI,KAAM,QAAO,6BAA+C,EACxGF,EAASE,EAAmB,EAAE,IAAI,OAAO,cAC/CL,EAAQ,IAASG,CACnB,EACA,MAAO,SAAY,CACjB,GAAM,CAAE,oBAAqBG,CAAqB,EAAI,KAAM,QAAO,+BAAiD,EAC9GH,EAASG,EAAqB,EAAE,MAAM,OAAO,cACnDN,EAAQ,MAAWG,CACrB,EACA,OAAQ,SAAY,CAClB,GAAM,CAAE,qBAAAI,CAAqB,EAAI,KAAM,QAAO,gCAAkD,EAC1FJ,EAASI,EAAqB,EAAE,OAAO,OAAO,cACpDP,EAAQ,OAAYG,CACtB,EACA,WAAY,SAAY,CACtB,GAAM,CAAE,yBAAAK,CAAyB,EAAI,KAAM,QAAO,oCAAsD,EAClGL,EAASK,EAAyB,EAAE,WAAW,OAAO,cAC5DR,EAAQ,WAAgBG,CAC1B,EACA,UAAW,SAAY,CACrB,GAAM,CAAE,wBAAAM,CAAwB,EAAI,KAAM,QAAO,mCAAqD,EAChGN,EAASM,EAAwB,EAAE,UAAU,OAAO,cAC1DT,EAAQ,UAAeG,CACzB,EACA,OAAQ,SAAY,CAClB,GAAM,CAAE,4BAA6BO,CAA6B,EAAI,KAAM,QAAO,gCAAkD,EAC/HP,EAASO,EAA6B,EAAE,cAAc,OAAO,cACnEV,EAAQ,OAAYG,CACtB,CACF,EACA,eAAeQ,EAAMC,EAAaC,EAAM,CACtC,IAAMC,EAAcb,EAAaW,CAAW,EAC5C,GAAI,CAACE,EACH,MAAM,IAAI,MAAM,yBAAyBF,CAAW,EAAE,EAEnDZ,EAAQY,CAAW,GACtB,MAAME,EAAY,EAGpB,IAAMC,EADSf,EAAQY,CAAW,EACZ,MAAMC,CAAI,EAChC,GAAIE,EAAO,YAAY,OAAS,GAAKA,EAAO,aAAa,OAAS,EAChE,MAAM,IAAIC,EAAkBD,CAAM,EAEpC,OAAOA,EAAO,KAChB,CAdeE,EAAAN,EAAA,SAefM,EAAON,EAAO,OAAO,EACrB,IAAIK,EAAoB,cAAc,KAAM,CA9G5C,MA8G4C,CAAAC,EAAA,0BAC1C,YAAYF,EAAQ,CAClB,IAAMG,EAAcH,EAAO,YAAY,IAAKI,GAAQA,EAAI,OAAO,EAAE,KAAK;AAAA,CAAI,EACpEC,EAAeL,EAAO,aAAa,IAAKI,GAAQA,EAAI,OAAO,EAAE,KAAK;AAAA,CAAI,EAC5E,MAAM,mBAAmBD,CAAW,IAAIE,CAAY,EAAE,EACtD,KAAK,OAASL,CAChB,CACA,MAAO,CACLE,EAAO,KAAM,mBAAmB,CAClC,CACF",
  "names": ["parsers", "initializers", "createInfoServices2", "parser", "createPacketServices2", "createPieServices2", "createArrayServices2", "createMatrixServices", "createTestSlidesServices", "createVisSlidesServices", "createVisualDiagramServices2", "parse", "diagramType", "text", "initializer", "result", "MermaidParseError", "__name", "lexerErrors", "err", "parserErrors"]
}
