{
  "version": 3,
  "sources": ["../../../src/diagrams/visual/db.ts", "../../../src/diagrams/visual/parser.ts", "../../../src/diagrams/visual/drawArrayDiagram.ts", "../../../src/diagrams/visual/drawMatrixDiagram.ts", "../../../src/diagrams/visual/drawStackDiagram.ts", "../../../src/diagrams/visual/drawGraphDiagram.ts", "../../../src/diagrams/visual/drawTreeDiagram.ts", "../../../src/diagrams/visual/drawLinkedListDiagram.ts", "../../../src/diagrams/visual/drawTextDiagram.ts", "../../../src/diagrams/visual/renderer.ts", "../../../src/diagrams/visual/styles.ts", "../../../src/diagrams/visual/diagram.ts"],
  "sourcesContent": ["import { getConfig as commonGetConfig } from '../../config.js';\nimport type { VisualDiagramConfig } from '../../config.type.js';\nimport DEFAULT_CONFIG from '../../defaultConfig.js';\nimport { cleanAndMerge } from '../../utils.js';\nimport {\n  clear as commonClear,\n  getAccDescription,\n  getAccTitle,\n  getDiagramTitle,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle,\n} from '../common/commonDb.js';\nimport type { VisualDB, VisualPage } from './types.js';\n\nconst defaultVisualData: VisualPage[] = [];\n\nlet data: VisualPage[] = [...defaultVisualData];\n\nconst DEFAULT_VISUAL_CONFIG: Required<VisualDiagramConfig> = DEFAULT_CONFIG.visual;\n\nconst getConfig = (): Required<VisualDiagramConfig> => {\n  return cleanAndMerge({\n    ...DEFAULT_VISUAL_CONFIG,\n    ...commonGetConfig().visual,\n  });\n};\n\nconst getPages = (): VisualPage[] => data;\n\nconst addPage = (page: VisualPage) => {\n  data.push(page);\n};\n\nconst clear = () => {\n  commonClear();\n  data = [...defaultVisualData];\n};\n\nexport const db: VisualDB = {\n  getPages,\n  addPage,\n  getConfig,\n  clear,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n};\n", "import type { VisualDiagram } from '@mermaid-js/parser';\nimport { parse } from '@mermaid-js/parser';\nimport type { ParserDefinition } from '../../diagram-api/types.js';\nimport { log } from '../../logger.js';\nimport { populateCommonDb } from '../common/populateCommonDb.js';\nimport { db } from './db.js';\n\nconst populate = (ast: VisualDiagram) => {\n  populateCommonDb(ast, db);\n  for (const page of ast.pages) {\n    const subDiagrams = page.subDiagrams.map((subDiagram) => {\n      switch (subDiagram.diagramType) {\n        case 'array':\n          return {\n            type: 'array',\n            orientation: subDiagram.orientation,\n            title: subDiagram.title,\n            showIndex: subDiagram.showIndex,\n            label: subDiagram.label,\n            elements: subDiagram.elements.map((e) => ({\n              value: e.value,\n              color: e.color,\n              arrow: e.arrowLabel !== undefined && e.arrowLabel !== null, //if with arrow then True, else False\n              arrowLabel: e.arrowLabel,\n            })),\n          };\n        case 'matrix':\n          return {\n            type: 'matrix',\n            title: subDiagram.title,\n            rows: subDiagram.rows.map((row) => ({\n              elements: row.elements.map((e) => ({\n                value: e.value,\n                color: e.color,\n              })),\n            })),\n            showIndex: subDiagram.showIndex,\n            label: subDiagram.label,\n          };\n        case 'stack':\n          return {\n            type: 'stack',\n            orientation: subDiagram.orientation,\n            title: subDiagram.title,\n            showIndex: subDiagram.showIndex,\n            label: subDiagram.label,\n            size: subDiagram.size,\n            elements: subDiagram.elements.map((e) => ({\n              value: e.value,\n              color: e.color,\n              arrow: e.arrowLabel !== undefined && e.arrowLabel !== null, //if with arrow then True, else False\n              arrowLabel: e.arrowLabel,\n            })),\n          };\n        case 'tree':\n          return {\n            type: 'tree',\n            title: subDiagram.title,\n            label: subDiagram.label,\n            elements: subDiagram.elements.map((element) => ({\n              nodeId: element.nodeId,\n              left: element.left == 'None' ? undefined : element.left,\n              right: element.right == 'None' ? undefined : element.right,\n              value: element.value,\n              color: element.color,\n            })),\n          };\n        case 'graph':\n          return {\n            type: 'graph',\n            title: subDiagram.title,\n            label: subDiagram.label,\n            elements: subDiagram.elements.map((element) => {\n              if (element.$type == 'NodeDefinition') {\n                return {\n                  type: 'node',\n                  nodeId: element.nodeId,\n                  value: element.value,\n                  color: element.color,\n                  arrow: element.arrowLabel !== undefined && element.arrowLabel !== null,\n                  arrowLabel: element.arrowLabel,\n                  hidden: element.hidden,\n                };\n              } else if (element.$type == 'EdgeDefinition') {\n                return {\n                  type: 'edge',\n                  start: element.start,\n                  end: element.end,\n                  value: element.value,\n                  color: element.color,\n                };\n              } else {\n                throw new Error('Unknown graph element type');\n              }\n            }),\n          };\n        case 'linkedList':\n          return {\n            type: 'linkedList',\n            title: subDiagram.title,\n            label: subDiagram.label,\n            elements: subDiagram.elements.map((e) => ({\n              value: e.value,\n              color: e.color,\n              arrow: e.arrowLabel ? true : false,\n              arrowLabel: e.arrowLabel,\n            })),\n          };\n        case 'text':\n          return {\n            type: 'text',\n            title: subDiagram.title, \n            elements: subDiagram.elements.map((e) => (e.value)),\n          };\n        default:\n          throw new Error(`Unknown diagram type: ${subDiagram.diagramType}`);\n      }\n    });\n\n    db.addPage({ subDiagrams });\n  }\n};\n\nexport const parser: ParserDefinition = {\n  parse: async (input: string): Promise<void> => {\n    const ast: VisualDiagram = await parse('visual', input);\n    log.debug(ast);\n    populate(ast);\n  },\n};\n", "import type { ArrayDiagram, ArrayElement } from './types.js';\nimport type { ArrayDiagramConfig } from '../../config.type.js';\nimport type { SVG } from '../../diagram-api/types.js';\n\nexport const drawArrayDiagram = (\n  svg: SVG,\n  arrayDiagram: ArrayDiagram,\n  yOffset: number,\n  config: Required<ArrayDiagramConfig>\n) => {\n  // Add marker definition for the arrowhead\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '6')\n    .attr('markerHeight', '6')\n    .attr('orient', 'auto-start-reverse')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n\n  // title style parameters\n  const titleFontSize = '16';\n  const title_X = 100;\n  const title_Y = 20;\n\n  // label style parameters\n  const labelFontSize = '16';\n  const label_X = 100;\n  const label_Y = 160;\n\n  // Add the title to the top center of the SVG\n  if (arrayDiagram.title) {\n    svg\n      .append('text')\n      .attr('x', title_X)\n      .attr('y', title_Y)\n      .attr('fill', config.labelColor)\n      .attr('font-size', titleFontSize)\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'arrayDiagramTitle')\n      .text(arrayDiagram.title);\n  }\n\n  // Apply right shift by adjusting the x translation value\n  const xOffset = 50;\n  const group = svg.append('g').attr('transform', `translate(${xOffset}, ${yOffset + 40})`);\n\n  arrayDiagram.elements.forEach((element, index) => {\n    drawElement(group as unknown as SVG, element, index, config, arrayDiagram.showIndex || false);\n  });\n\n  if (arrayDiagram.label) {\n    const labelYPosition = label_Y;\n    const labelXPosition = label_X;\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', config.labelColor)\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'arrayDiagramLabel')\n      .text(arrayDiagram.label);\n  }\n};\n\nconst drawElement = (\n  svg: SVG,\n  element: ArrayElement,\n  index: number,\n  { labelColor, labelFontSize }: Required<ArrayDiagramConfig>,\n  showIndex: boolean\n) => {\n  // array element style parameters\n  const indexFontSize = '16';\n  const elementFontSize = '16';\n\n  const group = svg.append('g');\n  const elementSize = 40;\n  const elementX = index * elementSize;\n  const elementY = 50;\n\n  const fillColor = getColor(element.color);\n\n  if (element.arrow) {\n    const arrowYStart = elementY - 40;\n    const arrowYEnd = elementY - 10;\n    group\n      .append('line')\n      .attr('x1', elementX + 20)\n      .attr('y1', arrowYStart)\n      .attr('x2', elementX + 20)\n      .attr('y2', arrowYEnd)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '1.5')\n      .attr('marker-end', 'url(#arrowhead)');\n\n    if (element.arrowLabel) {\n      group\n        .append('text')\n        .attr('x', elementX + 20)\n        .attr('y', arrowYStart - 20)\n        .attr('fill', labelColor)\n        .attr('font-size', labelFontSize)\n        .attr('dominant-baseline', 'hanging')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'arrowContext')\n        .text(element.arrowLabel);\n    }\n  }\n\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', elementSize)\n    .attr('height', elementSize)\n    .style('fill', fillColor)\n    .attr('stroke', '#000000')\n    .attr('stroke-width', '2px')\n    .attr('class', 'arrayElement');\n\n  group\n    .append('text')\n    .attr('x', elementX + elementSize / 2)\n    .attr('y', elementY + elementSize / 2)\n    .attr('fill', labelColor)\n    .attr('font-size', elementFontSize)\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value);\n\n  if (showIndex) {\n    group\n      .append('text')\n      .attr('x', elementX + elementSize / 2)\n      .attr('y', elementY + elementSize + 20)\n      .attr('fill', labelColor)\n      .attr('font-size', indexFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'indexLabel')\n      .text(index);\n  }\n};\n\nconst getColor = (color?: string): string => {\n  switch (color) {\n    case 'blue':\n      return 'rgba(0, 0, 255, 0.3)';\n    case 'green':\n      return 'rgba(0, 255, 0, 0.3)';\n    case 'red':\n      return 'rgba(255, 0, 0, 0.3)';\n    default:\n      return 'none';\n  }\n};\n", "import type { MatrixDiagram, MatrixRow, MatrixElement } from './types.js';\nimport type { MatrixDiagramConfig } from '../../config.type.js';\nimport type { DiagramRenderer, DrawDefinition, Group, SVG } from '../../diagram-api/types.js';\n\nexport const drawMatrixDiagram = (\n  svg: SVG,\n  matrixDiagram: MatrixDiagram,\n  yOffset: number,\n  config: Required<MatrixDiagramConfig>\n) => {\n  const xOffset = 50; // Adjust this value to shift the matrix to the right\n  const titleOffset = matrixDiagram.title ? 100 : 0; // Space for the title if it exists\n  const group = svg\n    .append('g')\n    .attr('transform', `translate(${xOffset}, ${yOffset + titleOffset})`);\n\n  const rowCount = matrixDiagram.rows.length;\n  const colCount = Math.max(...matrixDiagram.rows.map((row) => row.elements.length));\n\n  // Add title if it exists\n  if (matrixDiagram.title) {\n    svg\n      .append('text')\n      .attr('x', xOffset)\n      .attr('y', yOffset)\n      .attr('fill', config.labelColor)\n      .attr('font-size', config.labelFontSize)\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'start')\n      .attr('class', 'diagramTitle')\n      .text(matrixDiagram.title);\n  }\n\n  matrixDiagram.rows.forEach((row, rowIndex) => {\n    row.elements.forEach((element, colIndex) => {\n      drawElement(group as unknown as SVG, element, rowIndex, colIndex, config);\n      drawGrid(group as unknown as SVG, rowIndex, colIndex, config); // Draw grid only for existing elements\n    });\n  });\n\n  if (matrixDiagram.label) {\n    const labelYPosition = rowCount * 50 + 50; // Increase the gap between the matrix and the label\n    const labelXPosition = colCount * 25; // Centered under the matrix\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', config.labelColor)\n      .attr('font-size', config.labelFontSize)\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'arrayDiagramLabel')\n      .text(matrixDiagram.label);\n  }\n\n  if (matrixDiagram.showIndex) {\n    addIndices(group as unknown as SVG, rowCount, colCount, config);\n  }\n};\n\nconst drawElement = (\n  svg: SVG,\n  element: MatrixElement,\n  rowIndex: number,\n  colIndex: number,\n  { labelColor, labelFontSize }: Required<MatrixDiagramConfig>\n) => {\n  const group = svg.append('g');\n  const elementX = colIndex * 50;\n  const elementY = rowIndex * 50;\n\n  const borderColor = '#000000';\n  const borderWidth = '1.2px';\n\n  const fillColor = getColor(element.color);\n\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', 50)\n    .attr('height', 50)\n    .style('fill', fillColor)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth)\n    .attr('class', 'matrixElement');\n\n  group\n    .append('text')\n    .attr('x', elementX + 25)\n    .attr('y', elementY + 25)\n    .attr('fill', labelColor)\n    .attr('font-size', labelFontSize)\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value.toString());\n};\n\nconst addIndices = (\n  svg: SVG,\n  rowCount: number,\n  colCount: number,\n  { labelColor, labelFontSize }: Required<MatrixDiagramConfig>\n) => {\n  const indexGroup = svg.append('g');\n\n  // Draw row indices\n  for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n    indexGroup\n      .append('text')\n      .attr('x', -10)\n      .attr('y', rowIndex * 50 + 25)\n      .attr('fill', labelColor)\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'rowIndex')\n      .text(rowIndex.toString());\n  }\n\n  // Draw column indices\n  for (let colIndex = 0; colIndex < colCount; colIndex++) {\n    indexGroup\n      .append('text')\n      .attr('x', colIndex * 50 + 25)\n      .attr('y', -10)\n      .attr('fill', labelColor)\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'colIndex')\n      .text(colIndex.toString());\n  }\n};\n\nconst drawGrid = (\n  svg: SVG,\n  rowIndex: number,\n  colIndex: number,\n  { borderColor, borderWidth }: Required<MatrixDiagramConfig>\n) => {\n  const gridGroup = svg.append('g');\n  const x = colIndex * 50;\n  const y = rowIndex * 50;\n\n  gridGroup\n    .append('rect')\n    .attr('x', x)\n    .attr('y', y)\n    .attr('width', 50)\n    .attr('height', 50)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth)\n    .attr('fill', 'none');\n};\n\nconst getColor = (color?: string): string => {\n  switch (color) {\n    case 'blue':\n      return 'rgba(0, 0, 255, 0.3)';\n    case 'green':\n      return 'rgba(0, 255, 0, 0.3)';\n    case 'red':\n      return 'rgba(255, 0, 0, 0.3)';\n    default:\n      return 'none';\n  }\n};\n", "import type { StackDiagram, StackElement } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\n\nexport const drawStackDiagram = (svg: SVG, stackDiagram: StackDiagram, yOffset: number) => {\n  const group = svg.append('g').attr('transform', `translate(0, ${yOffset})`);\n\n  // Draw the framework of the stack\n  const stackHeight = stackDiagram.size * 40;\n  drawFramework(group as unknown as SVG, 50, 0, 70, stackHeight);\n\n  // Draw each stack element, positioning them from the bottom of the stack upwards\n  stackDiagram.elements.forEach((element, index) => {\n    const positionIndex = stackDiagram.size - stackDiagram.elements.length + index;\n    drawElement(group as unknown as SVG, element, positionIndex);\n  });\n\n  if (stackDiagram.label) {\n    // Calculate the total height of the stack diagram\n    const totalHeight = stackHeight + 40; // Adjust this value based on the height of your elements and desired spacing\n    const labelYPosition = totalHeight + 20; // Adjust this value based on the height of your elements and desired spacing\n    const labelXPosition = 85; // Center the label horizontally based on element width\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'stackDiagramLabel')\n      .text(stackDiagram.label);\n  }\n};\n\nconst drawElement = (svg: SVG, element: StackElement, positionIndex: number) => {\n  const group = svg.append('g');\n  const elementX = 50;\n  const elementY = positionIndex * 40;\n\n  const fillColor = getColor(element.color);\n\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', 70)\n    .attr('height', 40)\n    .style('fill', fillColor)\n    .attr('stroke', 'black')\n    .attr('stroke-width', '1')\n    .attr('class', 'stackElement');\n\n  group\n    .append('text')\n    .attr('x', elementX + 35)\n    .attr('y', elementY + 20)\n    .attr('fill', 'black')\n    .attr('font-size', '12')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value);\n};\n\nconst drawFramework = (svg: SVG, x: number, y: number, width: number, height: number) => {\n  const borderColor = '#000000';\n  const borderWidth = 2;\n\n  // Draw left side\n  svg\n    .append('line')\n    .attr('x1', x)\n    .attr('y1', y)\n    .attr('x2', x)\n    .attr('y2', y + height)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth);\n\n  // Draw right side\n  svg\n    .append('line')\n    .attr('x1', x + width)\n    .attr('y1', y)\n    .attr('x2', x + width)\n    .attr('y2', y + height)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth);\n\n  // Draw bottom\n  svg\n    .append('line')\n    .attr('x1', x)\n    .attr('y1', y + height)\n    .attr('x2', x + width)\n    .attr('y2', y + height)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth);\n};\n\nconst getColor = (color?: string): string => {\n  switch (color) {\n    case 'blue':\n      return 'rgba(0, 0, 255, 0.3)';\n    case 'green':\n      return 'rgba(0, 255, 0, 0.3)';\n    case 'red':\n      return 'rgba(255, 0, 0, 0.3)';\n    default:\n      return 'none';\n  }\n};\n", "import type { GraphDiagram, GraphNode, GraphEdge } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\n\nexport const drawGraphDiagram = (svg: SVG, graphDiagram: GraphDiagram, yOffset: number) => {\n  const group = svg.append('g').attr('transform', `translate(0, ${yOffset})`);\n\n  const graphNodes = graphDiagram.elements.filter((ele) => ele.type == 'node');\n  const graphEdges = graphDiagram.elements.filter((ele) => ele.type == 'edge');\n\n  // Calculate node positions in a circular layout\n  const nodePositions = calculateNodePositions(graphNodes || []);\n\n  // Draw graph edges first\n  if (graphEdges) {\n    graphEdges.forEach((edge) => {\n      drawEdge(group as unknown as SVG, edge, nodePositions);\n    });\n  }\n\n  // Draw graph nodes\n  if (graphNodes) {\n    graphNodes.forEach((node) => {\n      drawNode(group as unknown as SVG, node, nodePositions[node.nodeId]);\n    });\n  }\n\n  if (graphDiagram.label) {\n    // Add the label at the bottom\n    const labelYPosition = graphNodes ? Math.ceil(graphNodes.length / 3) * 100 + 70 : 100;\n    const labelXPosition = 150; // Adjust based on your diagram size and layout\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'graphDiagramLabel')\n      .text(graphDiagram.label);\n  }\n};\n\nconst calculateNodePositions = (\n  nodes: GraphNode[]\n): { [key: string]: { x: number; y: number } } => {\n  const positions: { [key: string]: { x: number; y: number } } = {};\n  const radius = 100; // Radius of the circle\n  const centerX = 150; // Center X position of the circle\n  const centerY = 150; // Center Y position of the circle\n  const angleIncrement = (2 * Math.PI) / nodes.length;\n\n  nodes.forEach((node, index) => {\n    const angle = index * angleIncrement;\n    positions[node.nodeId] = {\n      x: centerX + radius * Math.cos(angle),\n      y: centerY + radius * Math.sin(angle),\n    };\n  });\n\n  return positions;\n};\n\nconst drawNode = (svg: SVG, node: GraphNode, position: { x: number; y: number }) => {\n  const nodeX = position.x;\n  const nodeY = position.y;\n\n  const fillColor = getColor(node.color);\n\n  svg\n    .append('circle')\n    .attr('cx', nodeX)\n    .attr('cy', nodeY)\n    .attr('r', 20)\n    .style('fill', fillColor)\n    .attr('stroke', 'black')\n    .attr('stroke-width', '1')\n    .attr('class', 'graphNode');\n\n  svg\n    .append('text')\n    .attr('x', nodeX)\n    .attr('y', nodeY)\n    .attr('dy', '.35em')\n    .attr('fill', 'black')\n    .attr('font-size', '12')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'nodeLabel')\n    .text(node.value || node.nodeId);\n};\n\nconst drawEdge = (\n  svg: SVG,\n  edge: GraphEdge,\n  nodePositions: { [key: string]: { x: number; y: number } }\n) => {\n  const startNodePosition = nodePositions[edge.start];\n  const endNodePosition = nodePositions[edge.end];\n\n  if (startNodePosition && endNodePosition) {\n    const { startX, startY, endX, endY } = calculateEdgePosition(\n      startNodePosition,\n      endNodePosition\n    );\n\n    const strokeColor = edge.color || 'black';\n\n    svg\n      .append('line')\n      .attr('x1', startX)\n      .attr('y1', startY)\n      .attr('x2', endX)\n      .attr('y2', endY)\n      .attr('stroke', strokeColor)\n      .attr('stroke-width', '2');\n    // .attr('marker-end', edge.arrow ? 'url(#arrowhead)' : null);\n\n    if (edge.value) {\n      svg\n        .append('text')\n        .attr('x', (startX + endX) / 2)\n        .attr('y', (startY + endY) / 2)\n        .attr('fill', 'black')\n        .attr('font-size', '12')\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'edgeLabel')\n        .text(edge.value);\n    }\n  }\n};\n\nconst calculateEdgePosition = (start: { x: number; y: number }, end: { x: number; y: number }) => {\n  const radius = 20; // Radius of the nodes\n  const deltaX = end.x - start.x;\n  const deltaY = end.y - start.y;\n  const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n  const offsetX = (deltaX * radius) / distance;\n  const offsetY = (deltaY * radius) / distance;\n\n  return {\n    startX: start.x + offsetX,\n    startY: start.y + offsetY,\n    endX: end.x - offsetX,\n    endY: end.y - offsetY,\n  };\n};\n\nconst getColor = (color?: string): string => {\n  switch (color) {\n    case 'blue':\n      return 'rgba(0, 0, 255, 0.3)';\n    case 'green':\n      return 'rgba(0, 255, 0, 0.3)';\n    case 'red':\n      return 'rgba(255, 0, 0, 0.3)';\n    default:\n      return 'none';\n  }\n};\n", "import type { TreeDiagram } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\n\nexport const drawTreeDiagram = (svg: SVG, treeDiagram: TreeDiagram, yOffset: number) => {\n  const group = svg.append('g').attr('transform', `translate(0, ${yOffset})`);\n\n  const treeNodes = treeDiagram.elements || [];\n  const treeEdges = calculateTreeEdges(treeNodes);\n\n  // Calculate node positions in a tree layout\n  const nodePositions = calculateNodePositions(treeNodes);\n\n  // Draw tree edges first\n  if (treeEdges) {\n    treeEdges.forEach((edge) => {\n      drawEdge(group as unknown as SVG, edge, nodePositions);\n    });\n  }\n\n  // Draw tree nodes\n  if (treeNodes) {\n    treeNodes.forEach((node) => {\n      drawNode(group as unknown as SVG, node, nodePositions[node.nodeId]);\n    });\n  }\n\n  if (treeDiagram.label) {\n    // Add the label at the bottom\n    const labelYPosition = treeNodes ? Math.ceil(treeNodes.length / 3) * 100 + 70 : 100;\n    const labelXPosition = 150; // Adjust based on your diagram size and layout\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'treeDiagramLabel')\n      .text(treeDiagram.label);\n  }\n};\n\nconst calculateNodePositions = (nodes: any[]): { [key: string]: { x: number; y: number } } => {\n  const positions: { [key: string]: { x: number; y: number } } = {};\n  const levelHeight = 100;\n  const siblingDistance = 50;\n  const currentY = 0;\n\n  const calculatePosition = (node: any, currentX: number, depth: number) => {\n    const x = currentX;\n    const y = currentY + depth * levelHeight;\n    positions[node.nodeId] = { x, y };\n\n    const leftChild = nodes.find((n) => n.nodeId === node.left);\n    const rightChild = nodes.find((n) => n.nodeId === node.right);\n    if (leftChild) {\n      calculatePosition(leftChild, x - siblingDistance, depth + 1);\n    }\n    if (rightChild) {\n      calculatePosition(rightChild, x + siblingDistance, depth + 1);\n    }\n  };\n\n  const rootNode = nodes.find((node) => !node.parentId);\n  if (rootNode) {\n    calculatePosition(rootNode, 150, 0); // Start from the center horizontally\n  }\n\n  return positions;\n};\n\nconst calculateTreeEdges = (\n  nodes: any[]\n): { start: string; end: string; value?: string; color?: string }[] => {\n  const edges: { start: string; end: string; value?: string; color?: string }[] = [];\n\n  nodes.forEach((node) => {\n    if (node.left) {\n      edges.push({ start: node.nodeId, end: node.left });\n    }\n    if (node.right) {\n      edges.push({ start: node.nodeId, end: node.right });\n    }\n  });\n\n  return edges;\n};\n\nconst drawNode = (svg: SVG, node: any, position: { x: number; y: number }) => {\n  const nodeX = position.x;\n  const nodeY = position.y;\n\n  const fillColor = getColor(node.color);\n\n  svg\n    .append('circle')\n    .attr('cx', nodeX)\n    .attr('cy', nodeY)\n    .attr('r', 20)\n    .style('fill', fillColor)\n    .attr('stroke', 'black')\n    .attr('stroke-width', '1')\n    .attr('class', 'treeNode');\n\n  svg\n    .append('text')\n    .attr('x', nodeX)\n    .attr('y', nodeY)\n    .attr('dy', '.35em')\n    .attr('fill', 'black')\n    .attr('font-size', '12')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'nodeLabel')\n    .text(node.value || node.nodeId);\n};\n\nconst drawEdge = (\n  svg: SVG,\n  edge: { start: string; end: string; value?: string; color?: string },\n  nodePositions: { [key: string]: { x: number; y: number } }\n) => {\n  const startNodePosition = nodePositions[edge.start];\n  const endNodePosition = nodePositions[edge.end];\n\n  if (startNodePosition && endNodePosition) {\n    const { startX, startY, endX, endY } = calculateEdgePosition(\n      startNodePosition,\n      endNodePosition\n    );\n\n    const strokeColor = edge.color || 'black';\n\n    svg\n      .append('line')\n      .attr('x1', startX)\n      .attr('y1', startY)\n      .attr('x2', endX)\n      .attr('y2', endY)\n      .attr('stroke', strokeColor)\n      .attr('stroke-width', '2');\n\n    if (edge.value) {\n      svg\n        .append('text')\n        .attr('x', (startX + endX) / 2)\n        .attr('y', (startY + endY) / 2)\n        .attr('fill', 'black')\n        .attr('font-size', '12')\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'edgeLabel')\n        .text(edge.value);\n    }\n  }\n};\n\nconst calculateEdgePosition = (start: { x: number; y: number }, end: { x: number; y: number }) => {\n  const radius = 20; // Radius of the nodes\n  const deltaX = end.x - start.x;\n  const deltaY = end.y - start.y;\n  const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n  const offsetX = (deltaX * radius) / distance;\n  const offsetY = (deltaY * radius) / distance;\n\n  return {\n    startX: start.x + offsetX,\n    startY: start.y + offsetY,\n    endX: end.x - offsetX,\n    endY: end.y - offsetY,\n  };\n};\n\nconst getColor = (color?: string): string => {\n  switch (color) {\n    case 'blue':\n      return 'rgba(0, 0, 255, 0.3)';\n    case 'green':\n      return 'rgba(0, 255, 0, 0.3)';\n    case 'red':\n      return 'rgba(255, 0, 0, 0.3)';\n    default:\n      return 'none';\n  }\n};\n", "import type { LinkedListDiagram, LinkedListElement } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\n\nexport const drawLinkedListDiagram = (\n  svg: SVG,\n  linkedListDiagram: LinkedListDiagram,\n  yOffset: number\n) => {\n  const group = svg.append('g').attr('transform', `translate(0, ${yOffset})`);\n\n  // Define the marker for the arrowhead\n  group\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '10')\n    .attr('refY', '5')\n    .attr('markerWidth', '6')\n    .attr('markerHeight', '6')\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n\n  const linkedListNodes = linkedListDiagram.elements;\n\n  // Calculate node positions in a linear layout\n  const nodePositions = calculateNodePositions(linkedListNodes || []);\n\n  // Draw linked list nodes and arrows\n  if (linkedListNodes) {\n    linkedListNodes.forEach((node, index) => {\n      drawNode(\n        group as unknown as SVG,\n        node,\n        nodePositions[index],\n        index < linkedListNodes.length - 1\n      );\n    });\n  }\n\n  if (linkedListDiagram.label) {\n    // Add the label at the bottom\n    const labelYPosition = 100;\n    const labelXPosition = 150; // Adjust based on your diagram size and layout\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'linkedListDiagramLabel')\n      .text(linkedListDiagram.label);\n  }\n};\n\nconst calculateNodePositions = (nodes: LinkedListElement[]): { x: number; y: number }[] => {\n  const positions: { x: number; y: number }[] = [];\n  const startX = 50; // Starting X position\n  const startY = 50; // Starting Y position\n  const nodeSpacing = 120; // Increased spacing between nodes\n\n  nodes.forEach((_, index) => {\n    positions.push({\n      x: startX + index * nodeSpacing,\n      y: startY,\n    });\n  });\n\n  return positions;\n};\n\nconst drawNode = (\n  svg: SVG,\n  node: LinkedListElement,\n  position: { x: number; y: number },\n  hasNext: boolean\n) => {\n  const nodeX = position.x;\n  const nodeY = position.y;\n\n  const fillColor = getColor(node.color);\n\n  // Draw the rectangle for the node\n  svg\n    .append('rect')\n    .attr('x', nodeX)\n    .attr('y', nodeY)\n    .attr('width', 60)\n    .attr('height', 30)\n    .style('fill', fillColor)\n    .attr('stroke', 'black')\n    .attr('stroke-width', '1')\n    .attr('class', 'linkedListNode');\n\n  // Draw the text for the node value\n  svg\n    .append('text')\n    .attr('x', nodeX + 30)\n    .attr('y', nodeY + 15)\n    .attr('dy', '.35em')\n    .attr('fill', 'black')\n    .attr('font-size', '12')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'nodeLabel')\n    .text(node.value);\n\n  // Draw the smaller arrow above the node if it exists\n  if (node.arrow) {\n    svg\n      .append('line')\n      .attr('x1', nodeX + 30)\n      .attr('y1', nodeY - 30)\n      .attr('x2', nodeX + 30)\n      .attr('y2', nodeY)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '2')\n      .attr('marker-end', 'url(#arrowhead)');\n\n    // Draw the arrow label\n    if (node.arrowLabel) {\n      svg\n        .append('text')\n        .attr('x', nodeX + 30)\n        .attr('y', nodeY - 40)\n        .attr('fill', 'black')\n        .attr('font-size', '16')\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'arrowLabel')\n        .text(node.arrowLabel);\n    }\n  }\n\n  // Draw the longer connecting line to the next node if there is one\n  if (hasNext) {\n    svg\n      .append('line')\n      .attr('x1', nodeX + 60)\n      .attr('y1', nodeY + 15)\n      .attr('x2', nodeX + 60 + 60) // Increased length of the connecting line\n      .attr('y2', nodeY + 15)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '2')\n      .attr('marker-end', 'url(#arrowhead)');\n  }\n};\n\nconst getColor = (color?: string): string => {\n  switch (color) {\n    case 'blue':\n      return 'rgba(0, 0, 255, 0.3)';\n    case 'green':\n      return 'rgba(0, 255, 0, 0.3)';\n    case 'red':\n      return 'rgba(255, 0, 0, 0.3)';\n    default:\n      return 'white';\n  }\n};\n", "import type { TextDiagram } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\n\nexport const drawTextDiagram = (svg: SVG, textDiagram: TextDiagram, yOffset: number) => {\n  const group = svg.append('g').attr('transform', `translate(0, ${yOffset})`);\n\n  // Draw each text element\n  textDiagram.elements.forEach((element, index) => {\n    drawElement(group as unknown as SVG, element, index);\n  });\n\n  if (textDiagram.label) {\n    // Calculate the total height of the text diagram\n    const totalHeight = textDiagram.elements.length * 40; // Adjust this value based on the height of your elements and desired spacing\n    const labelYPosition = totalHeight + 20; // Adjust this value based on the height of your elements and desired spacing\n    const labelXPosition = 50; // Center the label horizontally based on element width\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'textDiagramLabel')\n      .text(textDiagram.label);\n  }\n};\n\nconst drawElement = (svg: SVG, element: string, positionIndex: number) => {\n  const group = svg.append('g');\n  const elementX = 50;\n  const elementY = positionIndex * 40;\n\n  const lines = element.split('\\n');\n\n  lines.forEach((line, lineIndex) => {\n    group\n      .append('text')\n      .attr('x', elementX)\n      .attr('y', elementY + lineIndex * 20) // Adjust the line height as needed\n      .attr('fill', 'black')\n      .attr('font-size', '18')\n      .attr('dominant-baseline', 'hanging')\n      .attr('class', 'textElement')\n      .text(line);\n  });\n};\n", "import * as d3 from 'd3';\nimport type { Diagram } from '../../Diagram.js';\nimport type { DiagramRenderer, DrawDefinition, SVG } from '../../diagram-api/types.js';\nimport { selectSvgElement } from '../../rendering-util/selectSvgElement.js';\nimport { configureSvgSize } from '../../setupGraphViewbox.js';\nimport type {\n  VisualDB,\n  VisualPage,\n  ArrayDiagram,\n  MatrixDiagram,\n  StackDiagram,\n  GraphDiagram,\n  TreeDiagram,\n  LinkedListDiagram,\n  TextDiagram,\n} from './types.js';\nimport { drawArrayDiagram } from './drawArrayDiagram.js';\nimport { drawMatrixDiagram } from './drawMatrixDiagram.js';\nimport { drawStackDiagram } from './drawStackDiagram.js';\nimport { drawGraphDiagram } from './drawGraphDiagram.js';\nimport { drawTreeDiagram } from './drawTreeDiagram.js';\nimport { drawLinkedListDiagram } from './drawLinkedListDiagram.js';\nimport { drawTextDiagram} from './drawTextDiagram.js';\n\nconst draw: DrawDefinition = (_text, id, _version, diagram: Diagram) => {\n  const db = diagram.db as VisualDB;\n  const config = db.getConfig();\n  const pages = db.getPages();\n  const title = db.getDiagramTitle();\n  const svgHeight = 800;\n  const svgWidth = 1000;\n  const svg: SVG = selectSvgElement(id);\n\n  let currentPage = 0;\n  let playInterval: number | null = null;\n\n  const renderPage = (pageIndex: number) => {\n    svg.selectAll('g.page').attr('display', 'none');\n    svg.select(`#page${pageIndex}`).attr('display', 'inline');\n\n    // Update button states\n    svg.select('#prevButton').attr('fill', pageIndex > 0 ? '#007bff' : '#c0c0c0');\n    svg.select('#nextButton').attr('fill', pageIndex < pages.length - 1 ? '#007bff' : '#c0c0c0');\n\n    // Update current page display\n    svg.select('#pageIndicator').text(`${pageIndex + 1} / ${pages.length}`);\n  };\n\n  const addNavigationButtons = (svg: SVG, totalPages: number) => {\n    const buttonGroup = svg.append('g').attr('class', 'navigation-buttons');\n\n    const buttonWidth = 40;\n    const buttonHeight = 20;\n    const buttonSpacing = 10;\n\n    const buttonsX = svgWidth / 2 - (buttonWidth * 1.5 + buttonSpacing);\n    const buttonsY = svgHeight - 60; // Adjusted y position\n\n    // Prev button\n    const prevButtonGroup = buttonGroup\n      .append('g')\n      .attr('id', 'prevButtonGroup')\n      .attr('cursor', 'pointer');\n\n    prevButtonGroup\n      .append('rect')\n      .attr('id', 'prevButton')\n      .attr('x', buttonsX)\n      .attr('y', buttonsY)\n      .attr('width', buttonWidth)\n      .attr('height', buttonHeight)\n      .attr('fill', '#c0c0c0'); // Initially disabled\n\n    prevButtonGroup\n      .append('text')\n      .text('<')\n      .attr('x', buttonsX + buttonWidth / 2)\n      .attr('y', buttonsY + buttonHeight / 2)\n      .attr('fill', 'white')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle');\n\n    // Play button\n    const playButtonGroup = buttonGroup\n      .append('g')\n      .attr('id', 'playButtonGroup')\n      .attr('cursor', 'pointer');\n\n    playButtonGroup\n      .append('rect')\n      .attr('id', 'playButton')\n      .attr('x', buttonsX + buttonWidth + buttonSpacing)\n      .attr('y', buttonsY)\n      .attr('width', buttonWidth)\n      .attr('height', buttonHeight)\n      .attr('fill', '#007bff'); // Initially enabled\n\n    playButtonGroup\n      .append('text')\n      .text('\u25B6')\n      .attr('x', buttonsX + buttonWidth + buttonSpacing + buttonWidth / 2)\n      .attr('y', buttonsY + buttonHeight / 2)\n      .attr('fill', 'white')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle');\n\n    // Next button\n    const nextButtonGroup = buttonGroup\n      .append('g')\n      .attr('id', 'nextButtonGroup')\n      .attr('cursor', 'pointer');\n\n    nextButtonGroup\n      .append('rect')\n      .attr('id', 'nextButton')\n      .attr('x', buttonsX + 2 * (buttonWidth + buttonSpacing))\n      .attr('y', buttonsY)\n      .attr('width', buttonWidth)\n      .attr('height', buttonHeight)\n      .attr('fill', '#007bff'); // Initially enabled\n\n    nextButtonGroup\n      .append('text')\n      .text('>')\n      .attr('x', buttonsX + 2 * (buttonWidth + buttonSpacing) + buttonWidth / 2)\n      .attr('y', buttonsY + buttonHeight / 2)\n      .attr('fill', 'white')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle');\n\n    // Page indicator\n    buttonGroup\n      .append('text')\n      .attr('id', 'pageIndicator')\n      .attr('x', svgWidth - 50)\n      .attr('y', svgHeight - 50)\n      .attr('fill', 'black')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .text(`1 / ${totalPages}`);\n\n    prevButtonGroup.node()?.addEventListener('click', () => {\n      if (currentPage > 0) {\n        currentPage -= 1;\n        renderPage(currentPage);\n      }\n    });\n\n    nextButtonGroup.node()?.addEventListener('click', () => {\n      if (currentPage < totalPages - 1) {\n        currentPage += 1;\n        renderPage(currentPage);\n      }\n    });\n\n    playButtonGroup.node()?.addEventListener('click', () => {\n      if (playInterval) {\n        clearInterval(playInterval);\n        playInterval = null;\n        d3.select('#playButton text').text('\u25B6');\n        d3.select('#playButton').attr('fill', '#007bff');\n      } else {\n        playInterval = 1000;\n        d3.select('#playButton text').text('\u275A\u275A');\n        d3.select('#playButton').attr('fill', '#c0c0c0');\n      }\n    });\n  };\n\n  const drawPage = (svg: SVG, page: VisualPage, pageIndex: number) => {\n    const pageGroup = svg\n      .append('g')\n      .attr('id', `page${pageIndex}`)\n      .attr('class', 'page')\n      .attr('display', pageIndex === 0 ? 'inline' : 'none');\n\n    if (title) {\n      pageGroup\n        .append('text')\n        .text(title)\n        .attr('x', svgWidth / 2)\n        .attr('y', 25)\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'pageTitle');\n    }\n\n    let yOffset = 50;\n\n    for (const subDiagram of page.subDiagrams) {\n      switch (subDiagram.type) {\n        case 'array': {\n          drawArrayDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as ArrayDiagram,\n            yOffset,\n            config\n          );\n          yOffset += 250; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'matrix': {\n          drawMatrixDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as MatrixDiagram,\n            yOffset,\n            config\n          );\n          yOffset += 250; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'stack': {\n          drawStackDiagram(pageGroup as unknown as SVG, subDiagram as StackDiagram, yOffset);\n          yOffset += 250; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'graph': {\n          drawGraphDiagram(pageGroup as unknown as SVG, subDiagram as GraphDiagram, yOffset);\n          yOffset += 250; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'tree': {\n          drawTreeDiagram(pageGroup as unknown as SVG, subDiagram as TreeDiagram, yOffset);\n          yOffset += 250; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'linkedList': {\n          drawLinkedListDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as LinkedListDiagram,\n            yOffset\n          );\n          yOffset += 250; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'text': {\n          drawTextDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as TextDiagram,\n            yOffset\n          );\n          yOffset += 250; // Adjust the offset for next sub-diagram\n          break;\n        }\n        default:\n          throw new Error(`Unknown diagram type: ${subDiagram.type}`);\n      }\n    }\n  };\n\n  svg.attr('viewBox', `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n\n  pages.forEach((page, index) => {\n    drawPage(svg, page, index);\n  });\n\n  addNavigationButtons(svg, pages.length);\n\n  renderPage(currentPage);\n\n  // Inject page-switching logic directly into the SVG as JavaScript\n  const switchPageScript = `\n    (function() {\n      const svg = document.getElementById('${id}');\n      let currentPage = 0;\n      const totalPages = ${pages.length};\n      let playInterval = null;\n\n      function renderPage(pageIndex) {\n        const pages = svg.querySelectorAll('g.page');\n        pages.forEach(page => {\n          page.style.display = 'none';\n        });\n        svg.querySelector('#page' + pageIndex).style.display = 'inline';\n\n        const prevButton = svg.querySelector('#prevButton');\n        const nextButton = svg.querySelector('#nextButton');\n        \n        if (prevButton) prevButton.setAttribute('fill', pageIndex > 0 ? '#007bff' : '#c0c0c0');\n        if (nextButton) nextButton.setAttribute('fill', pageIndex < totalPages - 1 ? '#007bff' : '#c0c0c0');\n\n        // Update current page display\n        svg.querySelector('#pageIndicator').textContent = (pageIndex + 1) + ' / ' + totalPages;\n      }\n\n      svg.querySelector('#prevButtonGroup').addEventListener('click', function() {\n        if (currentPage > 0) {\n          currentPage -= 1;\n          renderPage(currentPage);\n        }\n      });\n\n      svg.querySelector('#nextButtonGroup').addEventListener('click', function() {\n        if (currentPage < totalPages - 1) {\n          currentPage += 1;\n          renderPage(currentPage);\n        }\n      });\n\n      svg.querySelector('#playButtonGroup').addEventListener('click', function() {\n        if (playInterval) {\n          clearInterval(playInterval);\n          playInterval = null;\n          svg.querySelector('#playButton text').textContent = '\u25B6';\n          svg.querySelector('#playButton').setAttribute('fill', '#007bff');\n        } else {\n          playInterval = setInterval(() => {\n            if (currentPage < totalPages - 1) {\n              currentPage += 1;\n            } else {\n              currentPage = 0;\n            }\n            renderPage(currentPage);\n          }, 1000);\n          svg.querySelector('#playButton text').textContent = '\u275A\u275A';\n          svg.querySelector('#playButton').setAttribute('fill', '#c0c0c0');\n        }\n      });\n\n      renderPage(currentPage);\n    })();\n  `;\n\n  svg.append('script').attr('type', 'text/javascript').text(switchPageScript);\n};\n\nexport const renderer: DiagramRenderer = { draw };\n", "import { log } from '../../logger.js';\n\nexport const styles = (options: any = {}) => {\n  log.debug({ options });\n  return `\n    .element {\n      font-size: ${options.array?.elementFontSize ?? '10px'};\n      fill: ${options.array?.valueColor ?? 'black'};\n    }\n    .element.index {\n      fill: ${options.array?.indexColor ?? 'black'};\n    }\n    .element {\n      stroke: ${options.array?.elementStrokeColor ?? 'black'};\n      stroke-width: ${options.array?.elementStrokeWidth ?? '1'};\n      fill: ${options.array?.elementFillColor ?? '#efefef'};\n    }\n  `;\n};\n\nexport default styles;\n", "import type { DiagramDefinition } from '../../diagram-api/types.js';\nimport { db } from './db.js';\nimport { parser } from './parser.js';\nimport { renderer } from './renderer.js';\nimport { styles } from './styles.js';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n};\n"],
  "mappings": "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",
  "names": ["defaultVisualData", "data", "DEFAULT_VISUAL_CONFIG", "defaultConfig_default", "getConfig", "__name", "cleanAndMerge", "getPages", "addPage", "page", "clear", "db", "setAccTitle", "getAccTitle", "setDiagramTitle", "getDiagramTitle", "getAccDescription", "setAccDescription", "populate", "__name", "ast", "populateCommonDb", "db", "page", "subDiagrams", "subDiagram", "row", "e", "element", "parser", "input", "parse", "log", "drawArrayDiagram", "__name", "svg", "arrayDiagram", "yOffset", "config", "titleFontSize", "title_X", "title_Y", "labelFontSize", "label_X", "label_Y", "group", "element", "index", "drawElement", "labelYPosition", "labelXPosition", "labelColor", "showIndex", "indexFontSize", "elementFontSize", "elementSize", "elementX", "elementY", "fillColor", "getColor", "arrowYStart", "arrowYEnd", "color", "drawMatrixDiagram", "__name", "svg", "matrixDiagram", "yOffset", "config", "titleOffset", "group", "rowCount", "colCount", "row", "rowIndex", "element", "colIndex", "drawElement", "drawGrid", "labelYPosition", "labelXPosition", "addIndices", "labelColor", "labelFontSize", "elementX", "elementY", "borderColor", "borderWidth", "fillColor", "getColor", "indexGroup", "gridGroup", "x", "y", "color", "drawStackDiagram", "__name", "svg", "stackDiagram", "yOffset", "group", "stackHeight", "drawFramework", "element", "index", "positionIndex", "drawElement", "labelYPosition", "elementX", "elementY", "fillColor", "getColor", "x", "y", "width", "height", "borderColor", "color", "drawGraphDiagram", "__name", "svg", "graphDiagram", "yOffset", "group", "graphNodes", "ele", "graphEdges", "nodePositions", "calculateNodePositions", "edge", "drawEdge", "node", "drawNode", "labelYPosition", "nodes", "positions", "angleIncrement", "index", "angle", "position", "nodeX", "nodeY", "fillColor", "getColor", "startNodePosition", "endNodePosition", "startX", "startY", "endX", "endY", "calculateEdgePosition", "strokeColor", "start", "end", "deltaX", "deltaY", "distance", "offsetX", "offsetY", "color", "drawTreeDiagram", "__name", "svg", "treeDiagram", "yOffset", "group", "treeNodes", "treeEdges", "calculateTreeEdges", "nodePositions", "calculateNodePositions", "edge", "drawEdge", "node", "drawNode", "labelYPosition", "nodes", "positions", "calculatePosition", "currentX", "depth", "x", "y", "leftChild", "n", "rightChild", "rootNode", "edges", "position", "nodeX", "nodeY", "fillColor", "getColor", "startNodePosition", "endNodePosition", "startX", "startY", "endX", "endY", "calculateEdgePosition", "strokeColor", "start", "end", "deltaX", "deltaY", "distance", "offsetX", "offsetY", "color", "drawLinkedListDiagram", "__name", "svg", "linkedListDiagram", "yOffset", "group", "linkedListNodes", "nodePositions", "calculateNodePositions", "node", "index", "drawNode", "nodes", "positions", "_", "position", "hasNext", "nodeX", "nodeY", "fillColor", "getColor", "color", "drawTextDiagram", "__name", "svg", "textDiagram", "yOffset", "group", "element", "index", "drawElement", "labelYPosition", "positionIndex", "elementX", "elementY", "line", "lineIndex", "draw", "__name", "_text", "id", "_version", "diagram", "db", "config", "pages", "title", "svgHeight", "svgWidth", "svg", "selectSvgElement", "currentPage", "playInterval", "renderPage", "pageIndex", "addNavigationButtons", "totalPages", "buttonGroup", "buttonWidth", "buttonHeight", "buttonSpacing", "buttonsX", "buttonsY", "prevButtonGroup", "playButtonGroup", "nextButtonGroup", "select_default", "drawPage", "page", "pageGroup", "yOffset", "subDiagram", "drawArrayDiagram", "drawMatrixDiagram", "drawStackDiagram", "drawGraphDiagram", "drawTreeDiagram", "drawLinkedListDiagram", "drawTextDiagram", "configureSvgSize", "index", "switchPageScript", "renderer", "styles", "__name", "options", "log", "diagram", "parser", "db", "renderer", "styles"]
}
