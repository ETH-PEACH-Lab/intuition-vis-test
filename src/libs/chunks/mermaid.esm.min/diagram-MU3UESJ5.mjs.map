{
  "version": 3,
  "sources": ["../../../src/diagrams/array/db.ts", "../../../src/diagrams/array/parser.ts", "../../../src/diagrams/array/renderer.ts", "../../../src/diagrams/array/styles.ts", "../../../src/diagrams/array/diagram.ts"],
  "sourcesContent": ["import { getConfig as commonGetConfig } from '../../config.js';\nimport type { ArrayDiagramConfig } from '../../config.type.js';\nimport DEFAULT_CONFIG from '../../defaultConfig.js';\nimport { cleanAndMerge } from '../../utils.js';\nimport {\n  clear as commonClear,\n  getAccDescription,\n  getAccTitle,\n  getDiagramTitle,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle,\n} from '../common/commonDb.js';\nimport type { ArrayDB, ArrayData, ArrayElement } from './types.js';\n\nconst defaultArrayData: ArrayData = {\n  elements: [],\n};\n\nlet data: ArrayData = structuredClone(defaultArrayData);\n\nconst DEFAULT_ARRAY_CONFIG: Required<ArrayDiagramConfig> = DEFAULT_CONFIG.array;\n\nconst getConfig = (): Required<ArrayDiagramConfig> => {\n  // debug print\n  // console.log('db.ts getConfig return: ', cleanAndMerge({\n  //   ...DEFAULT_ARRAY_CONFIG,\n  //   ...commonGetConfig().array,\n  // }));\n  return cleanAndMerge({\n    ...DEFAULT_ARRAY_CONFIG,\n    ...commonGetConfig().array,\n  });\n};\n\nconst getArray = (): ArrayElement[] => data.elements;\n\nconst addElement = (element: ArrayElement) => {\n  // console.log('db addElement element: ', element);\n  data.elements.push(element);\n};\n\nconst clear = () => {\n  // debug print\n  // console.log('db.ts clear is called');\n  commonClear();\n  data = structuredClone(defaultArrayData);\n};\n\nexport const db: ArrayDB = {\n  addElement,\n  getArray,\n  getConfig,\n  clear,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n};\n\n// console.log(\"db.ts - db: \", db);\n", "import type { ArrayDiagram } from '@mermaid-js/parser';\nimport { parse } from '@mermaid-js/parser';\nimport type { ParserDefinition } from '../../diagram-api/types.js';\nimport { log } from '../../logger.js';\nimport { populateCommonDb } from '../common/populateCommonDb.js';\nimport { db } from './db.js';\n\nconst populate = (ast: ArrayDiagram) => {\n  populateCommonDb(ast, db);\n  for (const element of ast.elements) {\n    const index = ast.elements.indexOf(element);\n    if (index < 0) {\n      throw new Error(`Array index ${index} is invalid. Index must be non-negative.`);\n    }\n    log.debug(`Array element at index ${index} with value ${element.value}`);\n\n    // Add the element to the database with the arrow, context, and color properties if they exist\n    db.addElement({\n      index,\n      value: element.value,\n      arrow: element.arrow ? true : false, // Convert arrow to boolean\n      context: element.context || undefined, // Add context if it exists\n      color: element.color || 'none', // Add color if it exists, default to 'none'\n    });\n  }\n};\n\nexport const parser: ParserDefinition = {\n  parse: async (input: string): Promise<void> => {\n    const ast: ArrayDiagram = await parse('array', input);\n    // console.log('diagram/array/parser ast: ', ast);\n    log.debug(ast);\n    populate(ast);\n  },\n};\n", "import type { Diagram } from '../../Diagram.js';\nimport type { ArrayDiagramConfig } from '../../config.type.js';\nimport type { DiagramRenderer, DrawDefinition, Group, SVG } from '../../diagram-api/types.js';\nimport { selectSvgElement } from '../../rendering-util/selectSvgElement.js';\nimport { configureSvgSize } from '../../setupGraphViewbox.js';\nimport type { ArrayDB, ArrayElement } from './types.js';\n\n// cspell:ignore showindex\nconst showindex_key_word = 'showindex';\n\nconst draw: DrawDefinition = (_text, id, _version, diagram: Diagram) => {\n  const db = diagram.db as ArrayDB;\n  const config = db.getConfig();\n  const { elementColor, borderColor, borderWidth, labelColor, labelFontSize } = config;\n  const elements = db.getArray();\n  const showIndex = diagram.text.toLowerCase().includes(showindex_key_word); // Check for showIndex in a case-insensitive manner\n  const title = db.getDiagramTitle();\n  const svgHeight = 300; // Increased the height to provide more space above\n  const svgWidth = 800; // Adjust the width as needed\n  const svg: SVG = selectSvgElement(id);\n\n  svg.attr('viewbox', `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n\n  defineArrowhead(svg); // Ensure arrowhead marker is defined\n\n  for (const [index, element] of elements.entries()) {\n    drawElement(svg, element, index, config, showIndex);\n  }\n\n  if (title) {\n    svg\n      .append('text')\n      .text(title)\n      .attr('x', svgWidth / 2)\n      .attr('y', 25)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'arrayTitle');\n  }\n};\n\nconst drawElement = (\n  svg: SVG,\n  element: ArrayElement,\n  index: number,\n  {\n    elementColor,\n    borderColor,\n    borderWidth,\n    labelColor,\n    labelFontSize,\n  }: Required<ArrayDiagramConfig>,\n  showIndex: boolean\n) => {\n  const group: Group = svg.append('g');\n  const elementX = index * 50 + 50; // Adjust the x coordinate based on the index\n  const elementY = 100; // Increased the y coordinate to provide more space above\n\n  const getColor = (color: string) => {\n    switch (color) {\n      case 'blue':\n        return 'rgba(0, 0, 255, 0.3)'; // Semi-transparent blue\n      case 'red':\n        return 'rgba(255, 0, 0, 0.3)'; // Semi-transparent red\n      case 'green':\n        return 'rgba(0, 255, 0, 0.3)'; // Semi-transparent green\n      default:\n        return 'none';\n    }\n  };\n\n  if (element.arrow) {\n    // Draw arrow\n    const arrowYStart = elementY - 40; // Position the arrow head higher\n    const arrowYEnd = elementY - 10; // Position the end of the arrow at the top edge of the square\n    group\n      .append('line')\n      .attr('x1', elementX + 20)\n      .attr('y1', arrowYStart)\n      .attr('x2', elementX + 20)\n      .attr('y2', arrowYEnd)\n      .attr('stroke', 'black')\n      .attr('marker-end', 'url(#arrowhead)');\n\n    // Draw arrow context if it exists\n    if (element.context) {\n      group\n        .append('text')\n        .attr('x', elementX + 20)\n        .attr('y', arrowYStart - 10) // Position it slightly above the arrow start\n        .attr('fill', labelColor)\n        .attr('font-size', labelFontSize)\n        .attr('dominant-baseline', 'hanging') // Changed to hanging to avoid cut-off\n        .attr('text-anchor', 'middle')\n        .attr('class', 'arrowContext')\n        .text(element.context);\n    }\n  }\n\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', 40)\n    .attr('height', 40)\n    .style('fill', getColor(element.color ? element.color : 'none')) // Apply the semi-transparent fill color if specified, else none\n    .attr('stroke', '#69b3a2')\n    .attr('stroke-width', '3px')\n    .attr('class', 'arrayElement');\n\n  group\n    .append('text')\n    .attr('x', elementX + 20)\n    .attr('y', elementY + 20)\n    .attr('fill', labelColor)\n    .attr('font-size', labelFontSize)\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value);\n\n  if (showIndex) {\n    group\n      .append('text')\n      .attr('x', elementX + 20)\n      .attr('y', elementY + 60) // Position below the rectangle\n      .attr('fill', labelColor)\n      .attr('font-size', 25) // Slightly smaller font for the index\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'indexLabel')\n      .text(index);\n  }\n};\n\n// Define arrowhead marker\nconst defineArrowhead = (svg: SVG) => {\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '6')\n    .attr('markerHeight', '6')\n    .attr('orient', 'auto-start-reverse')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n};\n\nexport const renderer: DiagramRenderer = { draw };\n", "import { log } from '../../logger.js';\n\nexport const styles = (options: any = {}) => {\n  log.debug({ options });\n  return `\n    .element {\n      font-size: ${options.array?.elementFontSize ?? '10px'};\n      fill: ${options.array?.valueColor ?? 'black'};\n    }\n    .element.index {\n      fill: ${options.array?.indexColor ?? 'black'};\n    }\n    .element {\n      stroke: ${options.array?.elementStrokeColor ?? 'black'};\n      stroke-width: ${options.array?.elementStrokeWidth ?? '1'};\n      fill: ${options.array?.elementFillColor ?? '#efefef'};\n    }\n  `;\n};\n\nexport default styles;\n", "import type { DiagramDefinition } from '../../diagram-api/types.js';\nimport { db } from './db.js';\nimport { parser } from './parser.js';\nimport { renderer } from './renderer.js';\nimport { styles } from './styles.js';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n};\n"],
  "mappings": "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",
  "names": ["defaultArrayData", "data", "DEFAULT_ARRAY_CONFIG", "defaultConfig_default", "getConfig", "__name", "cleanAndMerge", "getArray", "addElement", "element", "clear", "db", "setAccTitle", "getAccTitle", "setDiagramTitle", "getDiagramTitle", "getAccDescription", "setAccDescription", "populate", "__name", "ast", "populateCommonDb", "db", "element", "index", "log", "parser", "input", "parse", "showindex_key_word", "draw", "__name", "_text", "id", "_version", "diagram", "db", "config", "elementColor", "borderColor", "borderWidth", "labelColor", "labelFontSize", "elements", "showIndex", "title", "svgHeight", "svgWidth", "svg", "selectSvgElement", "configureSvgSize", "defineArrowhead", "index", "element", "drawElement", "group", "elementX", "elementY", "getColor", "color", "arrowYStart", "arrowYEnd", "renderer", "styles", "__name", "options", "log", "diagram", "parser", "db", "renderer", "styles"]
}
