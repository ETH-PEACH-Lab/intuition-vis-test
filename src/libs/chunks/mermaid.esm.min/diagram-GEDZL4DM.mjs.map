{
  "version": 3,
  "sources": ["../../../src/diagrams/visual/db.ts", "../../../src/diagrams/visual/parser.ts", "../../../src/diagrams/visual/getColor.ts", "../../../src/diagrams/visual/drawArrayDiagram.ts", "../../../src/diagrams/visual/drawMatrixDiagram.ts", "../../../src/diagrams/visual/drawStackDiagram.ts", "../../../src/diagrams/visual/drawGraphDiagram.ts", "../../../src/diagrams/visual/drawTreeDiagram.ts", "../../../src/diagrams/visual/drawLinkedListDiagram.ts", "../../../src/diagrams/visual/drawTextDiagram.ts", "../../../src/diagrams/visual/renderer.ts", "../../../src/diagrams/visual/styles.ts", "../../../src/diagrams/visual/diagram.ts"],
  "sourcesContent": ["import { getConfig as commonGetConfig } from '../../config.js';\nimport type { VisualDiagramConfig } from '../../config.type.js';\nimport DEFAULT_CONFIG from '../../defaultConfig.js';\nimport { cleanAndMerge } from '../../utils.js';\nimport {\n  clear as commonClear,\n  getAccDescription,\n  getAccTitle,\n  getDiagramTitle,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle,\n} from '../common/commonDb.js';\nimport type { VisualDB, VisualPage } from './types.js';\n\nconst defaultVisualData: VisualPage[] = [];\n\nlet data: VisualPage[] = [...defaultVisualData];\n\nconst DEFAULT_VISUAL_CONFIG: Required<VisualDiagramConfig> = DEFAULT_CONFIG.visual;\n\nconst getConfig = (): Required<VisualDiagramConfig> => {\n  return cleanAndMerge({\n    ...DEFAULT_VISUAL_CONFIG,\n    ...commonGetConfig().visual,\n  });\n};\n\nconst getPages = (): VisualPage[] => data;\n\nconst addPage = (page: VisualPage) => {\n  data.push(page);\n};\n\nconst clear = () => {\n  commonClear();\n  data = [...defaultVisualData];\n};\n\nexport const db: VisualDB = {\n  getPages,\n  addPage,\n  getConfig,\n  clear,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n};\n", "import type { VisualDiagram } from '@mermaid-js/parser';\nimport { parse } from '@mermaid-js/parser';\nimport type { ParserDefinition } from '../../diagram-api/types.js';\nimport { log } from '../../logger.js';\nimport { populateCommonDb } from '../common/populateCommonDb.js';\nimport { db } from './db.js';\n\nconst populate = (ast: VisualDiagram) => {\n  populateCommonDb(ast, db);\n  for (const page of ast.pages) {\n    const subDiagrams = page.subDiagrams.map((subDiagram) => {\n      switch (subDiagram.diagramType) {\n        case 'array':\n          return {\n            type: 'array',\n            orientation: subDiagram.orientation,\n            title: subDiagram.title,\n            showIndex: subDiagram.showIndex,\n            label: subDiagram.label,\n            elements: subDiagram.elements.map((e) => ({\n              value: e.value,\n              color: e.color,\n              arrow: e.arrowLabel !== undefined && e.arrowLabel !== null, //if with arrow then True, else False\n              arrowLabel: e.arrowLabel,\n            })),\n          };\n        case 'matrix':\n          return {\n            type: 'matrix',\n            title: subDiagram.title,\n            rows: subDiagram.rows.map((row) => ({\n              elements: row.elements.map((e) => ({\n                value: e.value,\n                color: e.color,\n                arrow: e.arrowLabel !== undefined && e.arrowLabel !== null, //if with arrow then True, else False\n                arrowLabel: e.arrowLabel,\n              })),\n            })),\n            showIndex: subDiagram.showIndex,\n            label: subDiagram.label,\n          };\n        case 'stack':\n          return {\n            type: 'stack',\n            orientation: subDiagram.orientation,\n            title: subDiagram.title,\n            showIndex: subDiagram.showIndex,\n            label: subDiagram.label,\n            size: subDiagram.size,\n            elements: subDiagram.elements.map((e) => ({\n              value: e.value,\n              color: e.color,\n              arrow: e.arrowLabel !== undefined && e.arrowLabel !== null, //if with arrow then True, else False\n              arrowLabel: e.arrowLabel,\n            })),\n          };\n        case 'tree':\n          return {\n            type: 'tree',\n            title: subDiagram.title,\n            label: subDiagram.label,\n            elements: subDiagram.elements.map((element) => ({\n              nodeId: element.nodeId,\n              left: element.left == 'None' ? undefined : element.left,\n              right: element.right == 'None' ? undefined : element.right,\n              value: element.value,\n              color: element.color,\n              arrow: element.arrowLabel !== undefined && element.arrowLabel !== null, //if with arrow then True, else False\n              arrowLabel: element.arrowLabel,\n            })),\n          };\n        case 'graph':\n          return {\n            type: 'graph',\n            title: subDiagram.title,\n            label: subDiagram.label,\n            elements: subDiagram.elements.map((element) => {\n              if (element.$type == 'NodeDefinition') {\n                return {\n                  type: 'node',\n                  nodeId: element.nodeId,\n                  value: element.value,\n                  color: element.color,\n                  arrow: element.arrowLabel !== undefined && element.arrowLabel !== null,\n                  arrowLabel: element.arrowLabel,\n                  hidden: (element.hidden || '').toLowerCase() == 'true',\n                };\n              } else if (element.$type == 'EdgeDefinition') {\n                return {\n                  type: 'edge',\n                  start: element.start,\n                  end: element.end,\n                  value: element.value,\n                  color: element.color,\n                };\n              } else {\n                throw new Error('Unknown graph element type');\n              }\n            }),\n          };\n        case 'linkedList':\n          return {\n            type: 'linkedList',\n            title: subDiagram.title,\n            label: subDiagram.label,\n            elements: subDiagram.elements.map((e) => ({\n              value: e.value,\n              color: e.color,\n              arrow: e.arrowLabel ? true : false,\n              arrowLabel: e.arrowLabel,\n            })),\n          };\n        case 'text':\n          return {\n            type: 'text',\n            title: subDiagram.title,\n            elements: subDiagram.elements.map((e) => e.value),\n          };\n        default:\n          throw new Error(`Unknown diagram type: ${subDiagram.diagramType}`);\n      }\n    });\n\n    db.addPage({ subDiagrams });\n  }\n};\n\nexport const parser: ParserDefinition = {\n  parse: async (input: string): Promise<void> => {\n    const ast: VisualDiagram = await parse('visual', input);\n    log.debug(ast);\n    populate(ast);\n  },\n};\n", "export const getColor = (color?: string, transparency: number = 0.6): string => {\n  if (isValidHexColor(color)) {\n    return color || 'null';\n  }\n\n  const colorMap: Record<string, string> = {\n    black: '#000000',\n    white: '#FFFFFF',\n    red: '#FF0000',\n    green: '#008000',\n    blue: '#0000FF',\n    yellow: '#FFFF00',\n    cyan: '#00FFFF',\n    magenta: '#FF00FF',\n    gray: '#808080',\n    grey: '#808080', // Allow British spelling\n    maroon: '#800000',\n    olive: '#808000',\n    purple: '#800080',\n    teal: '#008080',\n    navy: '#000080',\n    orange: '#FFA500',\n    pink: '#FFC0CB',\n    brown: '#A52A2A',\n    aqua: '#00FFFF',\n    lime: '#00FF00',\n    gold: '#FFD700',\n    silver: '#C0C0C0',\n    beige: '#F5F5DC',\n    coral: '#FF7F50',\n    chocolate: '#D2691E',\n    crimson: '#DC143C',\n    indigo: '#4B0082',\n    khaki: '#F0E68C',\n    lavender: '#E6E6FA',\n    orchid: '#DA70D6',\n    plum: '#DDA0DD',\n    salmon: '#FA8072',\n    sienna: '#A0522D',\n    turquoise: '#40E0D0',\n    violet: '#EE82EE',\n    wheat: '#F5DEB3',\n    azure: '#F0FFFF',\n    ivory: '#FFFFF0',\n    mintcream: '#F5FFFA',\n    snow: '#FFFAFA',\n    goldenrod: '#DAA520',\n    tomato: '#FF6347',\n    slateblue: '#6A5ACD',\n    darkgreen: '#006400',\n    darkblue: '#00008B',\n    darkred: '#8B0000',\n    darkorange: '#FF8C00',\n    darkviolet: '#9400D3',\n    darkkhaki: '#BDB76B',\n    lightblue: '#ADD8E6',\n    lightgreen: '#90EE90',\n    lightcoral: '#F08080',\n    lightgray: '#D3D3D3',\n    lightgrey: '#D3D3D3', // British spelling\n  };\n\n  const lowerColor = color ? color.toLowerCase() : '';\n\n  if (lowerColor in colorMap) {\n    const hexColor = colorMap[lowerColor as keyof typeof colorMap];\n    const rgbaColor = hexToRgba(hexColor, transparency);\n    return rgbaColor;\n  } else {\n    return 'white';\n  }\n};\n\nfunction isValidHexColor(color?: string): boolean {\n  if (!color) {\n    return false;\n  }\n  // Regular expression for matching 3 or 6 digit hex color codes\n  const hexColorRegex = /^#([\\dA-Fa-f]{3}){1,2}$/;\n\n  // Test the color against the regex\n  return hexColorRegex.test(color);\n}\n\n// Helper function to convert hex to RGBA\nconst hexToRgba = (hex: string, alpha: number): string => {\n  hex = hex.replace(/^#/, '');\n\n  const r = parseInt(hex.slice(0, 2), 16);\n  const g = parseInt(hex.slice(2, 4), 16);\n  const b = parseInt(hex.slice(4, 6), 16);\n\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n", "import type { ArrayDiagram, ArrayElement } from './types.js';\nimport type { ArrayDiagramConfig } from '../../config.type.js';\nimport type { SVG } from '../../diagram-api/types.js';\nimport { getColor } from './getColor.js';\n\nexport const drawArrayDiagram = (\n  svg: SVG,\n  arrayDiagram: ArrayDiagram,\n  yOffset: number,\n  config: Required<ArrayDiagramConfig>,\n  component_id: number\n) => {\n  // Add marker definition for the arrowhead\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '6')\n    .attr('markerHeight', '6')\n    .attr('orient', 'auto-start-reverse')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n\n  // title style parameters\n  const titleFontSize = '16';\n  const title_X = 100;\n  const title_Y = 20;\n\n  // label style parameters\n  const labelFontSize = '16';\n  const label_X = 100;\n  const label_Y = 160;\n\n  // Add the title to the top center of the SVG\n  if (arrayDiagram.title) {\n    svg\n      .append('text')\n      .attr('x', title_X)\n      .attr('y', title_Y)\n      .attr('fill', config.labelColor)\n      .attr('font-size', titleFontSize)\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'arrayDiagramTitle')\n      .text(arrayDiagram.title);\n  }\n\n  // Apply right shift by adjusting the x translation value\n  const xOffset = 50;\n  const group = svg\n    .append('g')\n    .attr('class', 'component')\n    .attr('id', `component_${component_id}`)\n    .attr('transform', `translate(${xOffset}, ${yOffset + 40})`);\n\n  let unit_id = 0;\n\n  arrayDiagram.elements.forEach((element, index) => {\n    drawElement(\n      group as unknown as SVG,\n      element,\n      index,\n      config,\n      arrayDiagram.showIndex || false,\n      unit_id\n    );\n    unit_id += 1;\n  });\n\n  if (arrayDiagram.label) {\n    const labelYPosition = label_Y;\n    const labelXPosition = label_X;\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', config.labelColor)\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'arrayDiagramLabel')\n      .text(arrayDiagram.label);\n  }\n};\n\nconst drawElement = (\n  svg: SVG,\n  element: ArrayElement,\n  index: number,\n  { labelColor, labelFontSize }: Required<ArrayDiagramConfig>,\n  showIndex: boolean,\n  unit_id: number\n) => {\n  // array element style parameters\n  const indexFontSize = '16';\n  const elementFontSize = '16';\n\n  const group = svg.append('g');\n  group.attr('class', 'unit').attr('id', `unit_${unit_id}`);\n  const elementSize = 40;\n  const elementX = index * elementSize;\n  const elementY = 50;\n\n  const fillColor = getColor(element.color);\n\n  if (element.arrow && element.arrowLabel !== 'null') {\n    const arrowYStart = elementY - 40;\n    const arrowYEnd = elementY - 10;\n    group\n      .append('line')\n      .attr('x1', elementX + 20)\n      .attr('y1', arrowYStart)\n      .attr('x2', elementX + 20)\n      .attr('y2', arrowYEnd)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '1.5')\n      .attr('marker-end', 'url(#arrowhead)');\n\n    if (element.arrowLabel && element.arrowLabel !== 'null') {\n      group\n        .append('text')\n        .attr('x', elementX + 20)\n        .attr('y', arrowYStart - 20)\n        .attr('fill', labelColor)\n        .attr('font-size', '16')\n        .attr('dominant-baseline', 'hanging')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'arrowContext')\n        .text(element.arrowLabel);\n    }\n  }\n\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', elementSize)\n    .attr('height', elementSize)\n    .style('fill', fillColor)\n    .attr('stroke', '#000000')\n    .attr('stroke-width', '2px')\n    .attr('class', 'arrayElement');\n\n  group\n    .append('text')\n    .attr('x', elementX + elementSize / 2)\n    .attr('y', elementY + elementSize / 2)\n    .attr('fill', labelColor)\n    .attr('font-size', elementFontSize)\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value);\n\n  if (showIndex) {\n    group\n      .append('text')\n      .attr('x', elementX + elementSize / 2)\n      .attr('y', elementY + elementSize + 20)\n      .attr('fill', labelColor)\n      .attr('font-size', indexFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'indexLabel')\n      .text(index);\n  }\n};\n", "import type { MatrixDiagram, MatrixElement } from './types.js';\nimport type { MatrixDiagramConfig } from '../../config.type.js';\nimport type { SVG } from '../../diagram-api/types.js';\nimport { getColor } from './getColor.js';\n\nexport const drawMatrixDiagram = (\n  svg: SVG,\n  matrixDiagram: MatrixDiagram,\n  yOffset: number,\n  config: Required<MatrixDiagramConfig>,\n  component_id: number\n) => {\n  const xOffset = 50; // Adjust this value to shift the matrix to the right\n  const titleOffset = matrixDiagram.title ? 100 : 0; // Space for the title if it exists\n  const group = svg.append('g');\n  group\n    .attr('transform', `translate(0, ${yOffset})`)\n    .attr('class', 'component')\n    .attr('id', `component_${component_id}`);\n\n  const rowCount = matrixDiagram.rows.length;\n  const colCount = Math.max(...matrixDiagram.rows.map((row) => row.elements.length));\n\n  // Add title if it exists\n  if (matrixDiagram.title) {\n    svg\n      .append('text')\n      .attr('x', xOffset)\n      .attr('y', yOffset)\n      .attr('fill', config.labelColor)\n      .attr('font-size', config.labelFontSize)\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'start')\n      .attr('class', 'diagramTitle')\n      .text(matrixDiagram.title);\n  }\n\n  matrixDiagram.rows.forEach((row, rowIndex) => {\n    row.elements.forEach((element, colIndex) => {\n      drawElement(group as unknown as SVG, element, rowIndex, colIndex, config);\n      drawGrid(group as unknown as SVG, rowIndex, colIndex, config); // Draw grid only for existing elements\n    });\n  });\n\n  if (matrixDiagram.label) {\n    const labelYPosition = rowCount * 50 + 50; // Increase the gap between the matrix and the label\n    const labelXPosition = colCount * 25; // Centered under the matrix\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', config.labelColor)\n      .attr('font-size', config.labelFontSize)\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'arrayDiagramLabel')\n      .text(matrixDiagram.label);\n  }\n\n  if (matrixDiagram.showIndex) {\n    addIndices(group as unknown as SVG, rowCount, colCount, config);\n  }\n};\n\nconst drawElement = (\n  svg: SVG,\n  element: MatrixElement,\n  rowIndex: number,\n  colIndex: number,\n  { labelColor, labelFontSize }: Required<MatrixDiagramConfig>\n) => {\n  const group = svg.append('g');\n  group.attr('class', 'unit').attr('id', `unit_(${rowIndex},${colIndex})`);\n\n  const elementX = colIndex * 50;\n  const elementY = rowIndex * 50;\n\n  const borderColor = '#000000';\n  const borderWidth = '1.2px';\n\n  const fillColor = getColor(element.color);\n\n  // Draw the rectangle for the matrix element\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', 50)\n    .attr('height', 50)\n    .style('fill', fillColor)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth)\n    .attr('class', 'matrixElement');\n\n  // Draw the text inside the matrix element\n  group\n    .append('text')\n    .attr('x', elementX + 25)\n    .attr('y', elementY + 25)\n    .attr('fill', labelColor)\n    .attr('font-size', labelFontSize)\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value.toString());\n\n  // Draw the red circle and arrow label if the arrow exists\n  if (element.arrow && element.arrowLabel !== 'null') {\n    // Draw the red circle around the element\n    group\n      .append('circle')\n      .attr('cx', elementX + 25)\n      .attr('cy', elementY + 25)\n      .attr('r', 23)\n      .attr('stroke', 'red')\n      .attr('stroke-width', '2')\n      .attr('fill', 'none');\n\n    // Draw the arrow label near the circle\n    group\n      .append('text')\n      .attr('x', elementX + 52) // Position to the right of the circle\n      .attr('y', elementY + 25)\n      .attr('fill', 'red')\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'start')\n      .attr('class', 'arrowLabel')\n      .text(element.arrowLabel || '');\n  }\n};\n\nconst addIndices = (\n  svg: SVG,\n  rowCount: number,\n  colCount: number,\n  { labelColor, labelFontSize }: Required<MatrixDiagramConfig>\n) => {\n  const indexGroup = svg.append('g');\n\n  // Draw row indices\n  for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n    indexGroup\n      .append('text')\n      .attr('x', -10)\n      .attr('y', rowIndex * 50 + 25)\n      .attr('fill', labelColor)\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'rowIndex')\n      .text(rowIndex.toString());\n  }\n\n  // Draw column indices\n  for (let colIndex = 0; colIndex < colCount; colIndex++) {\n    indexGroup\n      .append('text')\n      .attr('x', colIndex * 50 + 25)\n      .attr('y', -10)\n      .attr('fill', labelColor)\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'colIndex')\n      .text(colIndex.toString());\n  }\n};\n\nconst drawGrid = (\n  svg: SVG,\n  rowIndex: number,\n  colIndex: number,\n  { borderColor, borderWidth }: Required<MatrixDiagramConfig>\n) => {\n  const gridGroup = svg.append('g');\n  const x = colIndex * 50;\n  const y = rowIndex * 50;\n\n  gridGroup\n    .append('rect')\n    .attr('x', x)\n    .attr('y', y)\n    .attr('width', 50)\n    .attr('height', 50)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth)\n    .attr('fill', 'none');\n};\n", "import type { StackDiagram, StackElement } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\nimport { getColor } from './getColor.js';\n\nexport const drawStackDiagram = (\n  svg: SVG,\n  stackDiagram: StackDiagram,\n  yOffset: number,\n  component_id: number\n) => {\n  // Add marker definition for the arrowhead\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '6')\n    .attr('markerHeight', '6')\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n\n  const group = svg.append('g');\n  group\n    .attr('transform', `translate(250, ${yOffset})`) // Changed x offset to 100 to move right\n    .attr('class', 'component')\n    .attr('id', `component_${component_id}`);\n\n  // Draw the framework of the stack\n  const stackHeight = stackDiagram.size * 40;\n  drawFramework(group as unknown as SVG, 300, 0, 70, stackHeight); // Adjusted x position from 50 to 150\n  let unit_id = 0;\n\n  // Draw each stack element, positioning them from the bottom of the stack upwards\n  stackDiagram.elements.forEach((element, index) => {\n    const positionIndex = stackDiagram.size - stackDiagram.elements.length + index;\n    drawElement(group as unknown as SVG, element, positionIndex, unit_id);\n    unit_id += 1;\n  });\n\n  if (stackDiagram.label) {\n    // Calculate the total height of the stack diagram\n    const totalHeight = stackHeight + 40; // Adjust this value based on the height of your elements and desired spacing\n    const labelYPosition = totalHeight + 20; // Adjust this value based on the height of your elements and desired spacing\n    const labelXPosition = 335; // Center the label horizontally based on element width\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'stackDiagramLabel')\n      .text(stackDiagram.label);\n  }\n};\n\nconst drawElement = (svg: SVG, element: StackElement, positionIndex: number, unit_id: number) => {\n  const group = svg.append('g');\n  group.attr('class', 'unit').attr('id', `unit_${unit_id}`);\n  const elementX = 300; // Changed x position to move right\n  const elementY = positionIndex * 40;\n\n  const fillColor = getColor(element.color);\n\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', 70)\n    .attr('height', 40)\n    .style('fill', fillColor)\n    .attr('stroke', 'black')\n    .attr('stroke-width', '1')\n    .attr('class', 'stackElement');\n\n  if (element.arrow && element.arrowLabel !== 'null') {\n    const arrowXStart = elementX + 80; // Start at the right edge of the element\n    const arrowXEnd = arrowXStart + 40; // Extend the arrow further to the right\n\n    group\n      .append('line')\n      .attr('x1', arrowXEnd)\n      .attr('y1', elementY + 20)\n      .attr('x2', arrowXStart)\n      .attr('y2', elementY + 20)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '1.5')\n      .attr('marker-end', 'url(#arrowhead)'); // Arrowhead points towards the element from the right\n\n    if (element.arrowLabel && element.arrowLabel !== 'null') {\n      group\n        .append('text')\n        .attr('x', arrowXEnd + 10)\n        .attr('y', elementY + 20)\n        .attr('fill', 'black')\n        .attr('font-size', '16')\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'start')\n        .attr('class', 'arrowContext')\n        .text(element.arrowLabel);\n    }\n  }\n\n  group\n    .append('text')\n    .attr('x', elementX + 35)\n    .attr('y', elementY + 20)\n    .attr('fill', 'black')\n    .attr('font-size', '16')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value);\n};\n\nconst drawFramework = (svg: SVG, x: number, y: number, width: number, height: number) => {\n  const borderColor = '#000000';\n  const borderWidth = 2;\n\n  // Draw left side\n  svg\n    .append('line')\n    .attr('x1', x)\n    .attr('y1', y)\n    .attr('x2', x)\n    .attr('y2', y + height)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth);\n\n  // Draw right side\n  svg\n    .append('line')\n    .attr('x1', x + width)\n    .attr('y1', y)\n    .attr('x2', x + width)\n    .attr('y2', y + height)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth);\n\n  // Draw bottom\n  svg\n    .append('line')\n    .attr('x1', x)\n    .attr('y1', y + height)\n    .attr('x2', x + width)\n    .attr('y2', y + height)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth);\n};\n", "import type { GraphDiagram, GraphNode, GraphEdge } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\nimport { getColor } from './getColor.js';\n\nexport const drawGraphDiagram = (\n  svg: SVG,\n  graphDiagram: GraphDiagram,\n  yOffset: number,\n  component_id: number\n) => {\n  const group = svg.append('g');\n  group\n    .attr('transform', `translate(0, ${yOffset})`)\n    .attr('class', 'component')\n    .attr('id', `component_${component_id}`);\n\n  // Define the marker for the arrowhead\n  group\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '4')\n    .attr('markerHeight', '5')\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n\n  const graphNodes = graphDiagram.elements.filter((ele) => ele.type == 'node');\n  const hiddenNodeIds = new Set(\n    graphNodes.filter((node) => node.hidden).map((node) => node.nodeId)\n  );\n  const visibleGraphNodes = graphNodes.filter((node) => !node.hidden);\n\n  const graphEdges = graphDiagram.elements.filter(\n    (ele) => ele.type == 'edge' && !hiddenNodeIds.has(ele.start) && !hiddenNodeIds.has(ele.end)\n  );\n\n  // Calculate node positions in a circular layout (including hidden nodes)\n  const nodePositions = calculateNodePositions(graphNodes || []);\n\n  // Draw graph edges first (excluding those connected to hidden nodes)\n  if (graphEdges) {\n    graphEdges.forEach((edge) => {\n      drawEdge(group as unknown as SVG, edge, nodePositions);\n    });\n  }\n\n  // Draw graph nodes (excluding hidden nodes)\n  if (visibleGraphNodes) {\n    let unit_id = 0;\n    visibleGraphNodes.forEach((node) => {\n      drawNode(group as unknown as SVG, node, nodePositions[node.nodeId], unit_id);\n      unit_id += 1;\n    });\n  }\n\n  if (graphDiagram.label) {\n    // Add the label at the bottom\n    const labelYPosition = visibleGraphNodes\n      ? Math.ceil(visibleGraphNodes.length / 3) * 100 + 70\n      : 100;\n    const labelXPosition = 150; // Adjust based on your diagram size and layout\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'graphDiagramLabel')\n      .text(graphDiagram.label);\n  }\n};\n\nconst calculateNodePositions = (\n  nodes: GraphNode[]\n): { [key: string]: { x: number; y: number } } => {\n  const positions: { [key: string]: { x: number; y: number } } = {};\n  const radius = 100; // Radius of the circle\n  const centerX = 150; // Center X position of the circle\n  const centerY = 150; // Center Y position of the circle\n  const angleIncrement = (2 * Math.PI) / nodes.length;\n\n  nodes.forEach((node, index) => {\n    const angle = index * angleIncrement;\n    positions[node.nodeId] = {\n      x: centerX + radius * Math.cos(angle),\n      y: centerY + radius * Math.sin(angle),\n    };\n  });\n\n  return positions;\n};\n\nconst drawNode = (\n  svg: SVG,\n  node: GraphNode,\n  position: { x: number; y: number },\n  unit_id: number\n) => {\n  // Skip drawing if the node is hidden\n  if (node.hidden) {\n    return;\n  }\n\n  const nodeX = position.x;\n  const nodeY = position.y;\n\n  const fillColor = getColor(node.color);\n  const group = svg.append('g');\n  group.attr('class', 'unit').attr('id', `unit_${unit_id}`);\n\n  group\n    .append('circle')\n    .attr('cx', nodeX)\n    .attr('cy', nodeY)\n    .attr('r', 20)\n    .style('fill', fillColor)\n    .attr('stroke', 'black')\n    .attr('stroke-width', '1')\n    .attr('class', 'graphNode');\n\n  group\n    .append('text')\n    .attr('x', nodeX)\n    .attr('y', nodeY)\n    .attr('dy', '.35em')\n    .attr('fill', 'black')\n    .attr('font-size', '16')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'nodeLabel')\n    .text(node.value || node.nodeId);\n\n  // Draw the arrow on the right side of the node, pointing towards the node\n  if (node.arrow && node.arrowLabel !== 'null') {\n    const arrowXStart = nodeX + 45; // Start slightly to the right of the node\n    const arrowXEnd = nodeX + 25; // End at the node edge\n\n    group\n      .append('line')\n      .attr('x1', arrowXStart)\n      .attr('y1', nodeY)\n      .attr('x2', arrowXEnd)\n      .attr('y2', nodeY)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '2')\n      .attr('marker-end', 'url(#arrowhead)');\n\n    // Draw the arrow label if it exists\n    group\n      .append('text')\n      .attr('x', arrowXStart + 5)\n      .attr('y', nodeY)\n      .attr('fill', 'black')\n      .attr('font-size', '14')\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'start')\n      .attr('class', 'arrowLabel')\n      .text(node.arrowLabel || '');\n  }\n};\n\nconst drawEdge = (\n  svg: SVG,\n  edge: GraphEdge,\n  nodePositions: { [key: string]: { x: number; y: number } }\n) => {\n  const startNodePosition = nodePositions[edge.start];\n  const endNodePosition = nodePositions[edge.end];\n\n  if (startNodePosition && endNodePosition) {\n    const { startX, startY, endX, endY } = calculateEdgePosition(\n      startNodePosition,\n      endNodePosition\n    );\n\n    const strokeColor = edge.color || 'black';\n\n    svg\n      .append('line')\n      .attr('x1', startX || 0)\n      .attr('y1', startY || 0)\n      .attr('x2', endX || 0)\n      .attr('y2', endY || 0)\n      .attr('stroke', strokeColor)\n      .attr('stroke-width', '2');\n\n    if (edge.value) {\n      svg\n        .append('text')\n        .attr('x', (startX + endX) / 2)\n        .attr('y', (startY + endY) / 2)\n        .attr('fill', 'black')\n        .attr('font-size', '16')\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'edgeLabel')\n        .text(edge.value);\n    }\n  }\n};\n\nconst calculateEdgePosition = (start: { x: number; y: number }, end: { x: number; y: number }) => {\n  const radius = 20; // Radius of the nodes\n  const deltaX = end.x - start.x;\n  const deltaY = end.y - start.y;\n  const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n  const offsetX = (deltaX * radius) / distance;\n  const offsetY = (deltaY * radius) / distance;\n\n  return {\n    startX: start.x + offsetX,\n    startY: start.y + offsetY,\n    endX: end.x - offsetX,\n    endY: end.y - offsetY,\n  };\n};\n", "import type { TreeDiagram } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\nimport { getColor } from './getColor.js';\n\nexport const drawTreeDiagram = (\n  svg: SVG,\n  treeDiagram: TreeDiagram,\n  yOffset: number,\n  component_id: number\n) => {\n  const group = svg.append('g');\n  group\n    .attr('transform', `translate(0, ${yOffset})`)\n    .attr('class', 'component')\n    .attr('id', `component_${component_id}`);\n\n  // Define the marker for the arrowhead\n  group\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '4')\n    .attr('markerHeight', '5')\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n\n  const treeNodes = treeDiagram.elements || [];\n  const treeEdges = calculateTreeEdges(treeNodes);\n\n  // Calculate node positions in a tree layout\n  const nodePositions = calculateNodePositions(treeNodes);\n\n  // Draw tree edges first\n  if (treeEdges) {\n    treeEdges.forEach((edge) => {\n      drawEdge(group as unknown as SVG, edge, nodePositions);\n    });\n  }\n\n  // Draw tree nodes\n  if (treeNodes) {\n    let unit_id = 0;\n    treeNodes.forEach((node) => {\n      drawNode(group as unknown as SVG, node, nodePositions[node.nodeId], unit_id);\n      unit_id += 1;\n    });\n  }\n\n  if (treeDiagram.label) {\n    // Add the label at the bottom\n    const labelYPosition = treeNodes ? Math.ceil(treeNodes.length / 3) * 100 + 70 : 100;\n    const labelXPosition = 150; // Adjust based on your diagram size and layout\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'treeDiagramLabel')\n      .text(treeDiagram.label);\n  }\n};\n\nconst calculateNodePositions = (nodes: any[]): { [key: string]: { x: number; y: number } } => {\n  const positions: { [key: string]: { x: number; y: number } } = {};\n  const levelHeight = 100;\n  const maxDepth = calculateMaxDepth(nodes);\n  const maxDistance = maxDepth > 2 ? 100 : 70; // Adjust this value based on the total number of layers\n  const currentY = 0;\n\n  const calculatePosition = (node: any, currentX: number, depth: number) => {\n    const adjustedSiblingDistance = maxDistance - depth * (maxDistance / maxDepth);\n    const x = currentX;\n    const y = currentY + depth * levelHeight;\n    positions[node.nodeId] = { x, y };\n\n    const leftChild = nodes.find((n) => n.nodeId === node.left);\n    const rightChild = nodes.find((n) => n.nodeId === node.right);\n    if (leftChild) {\n      calculatePosition(leftChild, x - adjustedSiblingDistance, depth + 1);\n    }\n    if (rightChild) {\n      calculatePosition(rightChild, x + adjustedSiblingDistance, depth + 1);\n    }\n  };\n\n  const rootNode = nodes.find((node) => !node.parentId);\n  if (rootNode) {\n    calculatePosition(rootNode, 150, 0); // Start from the center horizontally\n  }\n\n  return positions;\n};\n\nconst calculateMaxDepth = (nodes: any[]): number => {\n  const findDepth = (node: any, depth: number): number => {\n    const leftChild = nodes.find((n) => n.nodeId === node.left);\n    const rightChild = nodes.find((n) => n.nodeId === node.right);\n    const leftDepth = leftChild ? findDepth(leftChild, depth + 1) : depth;\n    const rightDepth = rightChild ? findDepth(rightChild, depth + 1) : depth;\n    return Math.max(leftDepth, rightDepth);\n  };\n\n  const rootNode = nodes.find((node) => !node.parentId);\n  if (rootNode) {\n    return findDepth(rootNode, 0);\n  }\n  return 0;\n};\n\nconst calculateTreeEdges = (\n  nodes: any[]\n): { start: string; end: string; value?: string; color?: string }[] => {\n  const edges: { start: string; end: string; value?: string; color?: string }[] = [];\n\n  nodes.forEach((node) => {\n    if (node.left) {\n      edges.push({ start: node.nodeId, end: node.left });\n    }\n    if (node.right) {\n      edges.push({ start: node.nodeId, end: node.right });\n    }\n  });\n\n  return edges;\n};\n\nconst drawNode = (svg: SVG, node: any, position: { x: number; y: number }, unit_id: number) => {\n  const nodeX = position.x;\n  const nodeY = position.y;\n\n  const fillColor = getColor(node.color);\n\n  const group = svg.append('g');\n  group.attr('class', 'unit').attr('id', `unit_${unit_id}`);\n\n  group\n    .append('circle')\n    .attr('cx', nodeX)\n    .attr('cy', nodeY)\n    .attr('r', 20)\n    .style('fill', fillColor)\n    .attr('stroke', 'black')\n    .attr('stroke-width', '1')\n    .attr('class', 'treeNode');\n\n  group\n    .append('text')\n    .attr('x', nodeX)\n    .attr('y', nodeY)\n    .attr('dy', '.35em')\n    .attr('fill', 'black')\n    .attr('font-size', '16')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'nodeLabel')\n    .text(node.value || node.nodeId);\n\n  // Draw the arrow on the right side of the node, pointing towards the node\n  if (node.arrow && node.arrowLabel !== 'null') {\n    const arrowXStart = nodeX + 45; // Move further right to avoid overlap\n    const arrowXEnd = nodeX + 25; // End near the node edge\n\n    group\n      .append('line')\n      .attr('x1', arrowXStart)\n      .attr('y1', nodeY)\n      .attr('x2', arrowXEnd)\n      .attr('y2', nodeY)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '2')\n      .attr('marker-end', 'url(#arrowhead)');\n\n    // Draw the arrow label if it exists\n    group\n      .append('text')\n      .attr('x', arrowXStart + 5)\n      .attr('y', nodeY) // Place the label slightly above the arrow\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'start')\n      .attr('class', 'arrowLabel')\n      .text(node.arrowLabel);\n  }\n};\n\nconst drawEdge = (\n  svg: SVG,\n  edge: { start: string; end: string; value?: string; color?: string },\n  nodePositions: { [key: string]: { x: number; y: number } }\n) => {\n  const startNodePosition = nodePositions[edge.start];\n  const endNodePosition = nodePositions[edge.end];\n\n  if (startNodePosition && endNodePosition) {\n    const { startX, startY, endX, endY } = calculateEdgePosition(\n      startNodePosition,\n      endNodePosition\n    );\n\n    const strokeColor = edge.color || 'black';\n\n    svg\n      .append('line')\n      .attr('x1', startX)\n      .attr('y1', startY)\n      .attr('x2', endX)\n      .attr('y2', endY)\n      .attr('stroke', strokeColor)\n      .attr('stroke-width', '2');\n\n    if (edge.value) {\n      svg\n        .append('text')\n        .attr('x', (startX + endX) / 2)\n        .attr('y', (startY + endY) / 2)\n        .attr('fill', 'black')\n        .attr('font-size', '16')\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'edgeLabel')\n        .text(edge.value);\n    }\n  }\n};\n\nconst calculateEdgePosition = (start: { x: number; y: number }, end: { x: number; y: number }) => {\n  const radius = 20; // Radius of the nodes\n  const deltaX = end.x - start.x;\n  const deltaY = end.y - start.y;\n  const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n  const offsetX = (deltaX * radius) / distance;\n  const offsetY = (deltaY * radius) / distance;\n\n  return {\n    startX: start.x + offsetX,\n    startY: start.y + offsetY,\n    endX: end.x - offsetX,\n    endY: end.y - offsetY,\n  };\n};\n", "import type { LinkedListDiagram, LinkedListElement } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\nimport { getColor } from './getColor.js';\n\nexport const drawLinkedListDiagram = (\n  svg: SVG,\n  linkedListDiagram: LinkedListDiagram,\n  yOffset: number,\n  component_id: number\n) => {\n  const group = svg.append('g');\n  group\n    .attr('transform', `translate(0, ${yOffset})`)\n    .attr('class', 'component')\n    .attr('id', `component_${component_id}`);\n\n  // Define the marker for the arrowhead_node\n  group\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead_node')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '5')\n    .attr('markerHeight', '6')\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n\n  // Define the marker for the arrowhead\n  group\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '3')\n    .attr('markerHeight', '5')\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n\n  const linkedListNodes = linkedListDiagram.elements;\n\n  // Calculate node positions in a linear layout\n  const nodePositions = calculateNodePositions(linkedListNodes || []);\n  let unit_id = 0;\n  // Draw linked list nodes and arrows\n  if (linkedListNodes) {\n    linkedListNodes.forEach((node, index) => {\n      drawNode(\n        group as unknown as SVG,\n        node,\n        nodePositions[index],\n        index < linkedListNodes.length - 1,\n        unit_id\n      );\n      unit_id += 1;\n    });\n  }\n\n  if (linkedListDiagram.label) {\n    // Add the label at the bottom\n    const labelYPosition = 100;\n    const labelXPosition = 150; // Adjust based on your diagram size and layout\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '18')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'linkedListDiagramLabel')\n      .text(linkedListDiagram.label);\n  }\n};\n\nconst calculateNodePositions = (nodes: LinkedListElement[]): { x: number; y: number }[] => {\n  const positions: { x: number; y: number }[] = [];\n  const startX = 50; // Starting X position\n  const startY = 50; // Starting Y position\n  const nodeSpacing = 120; // Increased spacing between nodes\n\n  nodes.forEach((_, index) => {\n    positions.push({\n      x: startX + index * nodeSpacing,\n      y: startY,\n    });\n  });\n\n  return positions;\n};\n\nconst drawNode = (\n  svg: SVG,\n  node: LinkedListElement,\n  position: { x: number; y: number },\n  hasNext: boolean,\n  unit_id: number\n) => {\n  const nodeX = position.x;\n  const nodeY = position.y;\n\n  const fillColor = getColor(node.color);\n  const group = svg.append('g');\n  group.attr('class', 'unit').attr('id', `unit_${unit_id}`);\n\n  // Draw the rectangle for the node\n  group\n    .append('rect')\n    .attr('x', nodeX)\n    .attr('y', nodeY)\n    .attr('width', 60)\n    .attr('height', 30)\n    .style('fill', fillColor)\n    .attr('stroke', 'black')\n    .attr('stroke-width', '1')\n    .attr('class', 'linkedListNode');\n\n  // Draw the text for the node value\n  group\n    .append('text')\n    .attr('x', nodeX + 30)\n    .attr('y', nodeY + 15)\n    .attr('dy', '.35em')\n    .attr('fill', 'black')\n    .attr('font-size', '18')\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'nodeLabel')\n    .text(node.value);\n\n  // Draw the smaller arrow above the node if it exists and the arrowLabel is not \"null\"\n  if (node.arrowLabel !== 'null') {\n    const arrowYStart = nodeY - 30; // Start of the arrow, closer to the node\n    const arrowYEnd = nodeY - 10; // End of the arrow, just above the node\n\n    group\n      .append('line')\n      .attr('x1', nodeX + 30)\n      .attr('y1', arrowYStart)\n      .attr('x2', nodeX + 30)\n      .attr('y2', arrowYEnd)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '2')\n      .attr('marker-end', 'url(#arrowhead)');\n\n    // Draw the arrow label\n    group\n      .append('text')\n      .attr('x', nodeX + 30)\n      .attr('y', arrowYStart - 10) // Place the label above the arrow\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'arrowLabel')\n      .text(node.arrowLabel || '');\n  }\n\n  // Draw the longer connecting line to the next node if there is one\n  if (hasNext) {\n    group\n      .append('line')\n      .attr('x1', nodeX + 60)\n      .attr('y1', nodeY + 15)\n      .attr('x2', nodeX + 60 + 55) // Increased length of the connecting line\n      .attr('y2', nodeY + 15)\n      .attr('stroke', 'black')\n      .attr('stroke-width', '2')\n      .attr('marker-end', 'url(#arrowhead_node)');\n  }\n};\n", "import type { TextDiagram } from './types.js';\nimport type { SVG } from '../../diagram-api/types.js';\n\nexport const drawTextDiagram = (\n  svg: SVG,\n  textDiagram: TextDiagram,\n  yOffset: number,\n  component_id: number\n) => {\n  const group = svg.append('g');\n  group\n    .attr('transform', `translate(0, ${yOffset})`)\n    .attr('class', 'component')\n    .attr('id', `component_${component_id}`);\n\n  let currentY = 0; // Initialize the current Y position\n\n  // Draw each text element\n  let unit_id = 0;\n\n  textDiagram.elements.forEach((element) => {\n    currentY = drawElement(group as unknown as SVG, element, currentY, unit_id);\n    unit_id += 1;\n  });\n\n  if (textDiagram.label) {\n    const labelYPosition = currentY + 20; // Adjust this value based on desired spacing\n    const labelXPosition = 50; // Center the label horizontally based on element width\n\n    group\n      .append('text')\n      .attr('x', labelXPosition)\n      .attr('y', labelYPosition)\n      .attr('fill', 'black')\n      .attr('font-size', '16')\n      .attr('dominant-baseline', 'hanging')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'textDiagramLabel')\n      .text(textDiagram.label);\n  }\n};\n\nconst drawElement = (svg: SVG, element: string, startY: number, unit_id: number) => {\n  const group = svg.append('g').attr('class', 'unit').attr('id', `unit_${unit_id}`);\n\n  const elementX = 50;\n\n  const lines = element.split('\\n');\n\n  lines.forEach((line, lineIndex) => {\n    const lineY = startY + lineIndex * 20; // Adjust the line height as needed\n    group\n      .append('text')\n      .attr('x', elementX)\n      .attr('y', lineY)\n      .attr('fill', 'black')\n      .attr('font-size', '20')\n      .attr('dominant-baseline', 'hanging')\n      .attr('class', 'textElement')\n      .text(line);\n  });\n\n  // Return the updated Y position for the next element, considering the height of the current element\n  return startY + lines.length * 20; // Adjust the line height as needed\n};\n", "import * as d3 from 'd3';\nimport type { Diagram } from '../../Diagram.js';\nimport type { DiagramRenderer, DrawDefinition, SVG } from '../../diagram-api/types.js';\nimport { selectSvgElement } from '../../rendering-util/selectSvgElement.js';\nimport { configureSvgSize } from '../../setupGraphViewbox.js';\nimport type {\n  VisualDB,\n  VisualPage,\n  ArrayDiagram,\n  MatrixDiagram,\n  StackDiagram,\n  GraphDiagram,\n  TreeDiagram,\n  LinkedListDiagram,\n  TextDiagram,\n} from './types.js';\nimport { drawArrayDiagram } from './drawArrayDiagram.js';\nimport { drawMatrixDiagram } from './drawMatrixDiagram.js';\nimport { drawStackDiagram } from './drawStackDiagram.js';\nimport { drawGraphDiagram } from './drawGraphDiagram.js';\nimport { drawTreeDiagram } from './drawTreeDiagram.js';\nimport { drawLinkedListDiagram } from './drawLinkedListDiagram.js';\nimport { drawTextDiagram } from './drawTextDiagram.js';\n\nconst draw: DrawDefinition = (_text, id, _version, diagram: Diagram) => {\n  const db = diagram.db as VisualDB;\n  const config = db.getConfig();\n  const pages = db.getPages();\n  const title = db.getDiagramTitle();\n  const svgHeight = 800;\n  const svgWidth = 1000;\n  const svg: SVG = selectSvgElement(id);\n\n  const currentPage = 0;\n  const playInterval: number | null = null;\n\n  const renderPage = (pageIndex: number) => {\n    svg.selectAll('g.page').attr('display', 'none');\n    svg.select(`#page${pageIndex}`).attr('display', 'inline');\n\n    // Update button states\n    svg.select('#prevButton').attr('fill', pageIndex > 0 ? '#007bff' : '#c0c0c0');\n    svg.select('#nextButton').attr('fill', pageIndex < pages.length - 1 ? '#007bff' : '#c0c0c0');\n\n    // Update current page display\n    svg.select('#pageIndicator').text(`${pageIndex + 1} / ${pages.length}`);\n  };\n\n  // const addNavigationButtons = (svg: SVG, totalPages: number) => {\n  //   const buttonGroup = svg.append('g').attr('class', 'navigation-buttons');\n\n  //   const buttonWidth = 40;\n  //   const buttonHeight = 20;\n  //   const buttonSpacing = 10;\n\n  //   const buttonsX = svgWidth / 2 - (buttonWidth * 1.5 + buttonSpacing);\n  //   const buttonsY = svgHeight - 60; // Adjusted y position\n\n  //   // Prev button\n  //   const prevButtonGroup = buttonGroup\n  //     .append('g')\n  //     .attr('id', 'prevButtonGroup')\n  //     .attr('cursor', 'pointer');\n\n  //   prevButtonGroup\n  //     .append('rect')\n  //     .attr('id', 'prevButton')\n  //     .attr('x', buttonsX)\n  //     .attr('y', buttonsY)\n  //     .attr('width', buttonWidth)\n  //     .attr('height', buttonHeight)\n  //     .attr('fill', '#c0c0c0'); // Initially disabled\n\n  //   prevButtonGroup\n  //     .append('text')\n  //     .text('<')\n  //     .attr('x', buttonsX + buttonWidth / 2)\n  //     .attr('y', buttonsY + buttonHeight / 2)\n  //     .attr('fill', 'white')\n  //     .attr('text-anchor', 'middle')\n  //     .attr('alignment-baseline', 'middle');\n\n  //   // Play button\n  //   const playButtonGroup = buttonGroup\n  //     .append('g')\n  //     .attr('id', 'playButtonGroup')\n  //     .attr('cursor', 'pointer');\n\n  //   playButtonGroup\n  //     .append('rect')\n  //     .attr('id', 'playButton')\n  //     .attr('x', buttonsX + buttonWidth + buttonSpacing)\n  //     .attr('y', buttonsY)\n  //     .attr('width', buttonWidth)\n  //     .attr('height', buttonHeight)\n  //     .attr('fill', '#007bff'); // Initially enabled\n\n  //   playButtonGroup\n  //     .append('text')\n  //     .text('\u25B6')\n  //     .attr('x', buttonsX + buttonWidth + buttonSpacing + buttonWidth / 2)\n  //     .attr('y', buttonsY + buttonHeight / 2)\n  //     .attr('fill', 'white')\n  //     .attr('text-anchor', 'middle')\n  //     .attr('alignment-baseline', 'middle');\n\n  //   // Next button\n  //   const nextButtonGroup = buttonGroup\n  //     .append('g')\n  //     .attr('id', 'nextButtonGroup')\n  //     .attr('cursor', 'pointer');\n\n  //   nextButtonGroup\n  //     .append('rect')\n  //     .attr('id', 'nextButton')\n  //     .attr('x', buttonsX + 2 * (buttonWidth + buttonSpacing))\n  //     .attr('y', buttonsY)\n  //     .attr('width', buttonWidth)\n  //     .attr('height', buttonHeight)\n  //     .attr('fill', '#007bff'); // Initially enabled\n\n  //   nextButtonGroup\n  //     .append('text')\n  //     .text('>')\n  //     .attr('x', buttonsX + 2 * (buttonWidth + buttonSpacing) + buttonWidth / 2)\n  //     .attr('y', buttonsY + buttonHeight / 2)\n  //     .attr('fill', 'white')\n  //     .attr('text-anchor', 'middle')\n  //     .attr('alignment-baseline', 'middle');\n\n  //   // Page indicator\n  //   buttonGroup\n  //     .append('text')\n  //     .attr('id', 'pageIndicator')\n  //     .attr('x', svgWidth - 50)\n  //     .attr('y', svgHeight - 50)\n  //     .attr('fill', 'black')\n  //     .attr('text-anchor', 'middle')\n  //     .attr('alignment-baseline', 'middle')\n  //     .text(`1 / ${totalPages}`);\n\n  //   prevButtonGroup.node()?.addEventListener('click', () => {\n  //     if (currentPage > 0) {\n  //       currentPage -= 1;\n  //       renderPage(currentPage);\n  //     }\n  //   });\n\n  //   nextButtonGroup.node()?.addEventListener('click', () => {\n  //     if (currentPage < totalPages - 1) {\n  //       currentPage += 1;\n  //       renderPage(currentPage);\n  //     }\n  //   });\n\n  //   playButtonGroup.node()?.addEventListener('click', () => {\n  //     if (playInterval) {\n  //       clearInterval(playInterval);\n  //       playInterval = null;\n  //       d3.select('#playButton text').text('\u25B6');\n  //       d3.select('#playButton').attr('fill', '#007bff');\n  //     } else {\n  //       playInterval = 1000;\n  //       d3.select('#playButton text').text('\u275A\u275A');\n  //       d3.select('#playButton').attr('fill', '#c0c0c0');\n  //     }\n  //   });\n  // };\n\n  const drawPage = (svg: SVG, page: VisualPage, pageIndex: number) => {\n    const pageGroup = svg\n      .append('g')\n      .attr('id', `page${pageIndex}`)\n      .attr('class', 'page')\n      .attr('display', pageIndex === 0 ? 'inline' : 'none');\n\n    if (title) {\n      pageGroup\n        .append('text')\n        .text(title)\n        .attr('x', svgWidth / 2)\n        .attr('y', 25)\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'pageTitle');\n    }\n\n    let yOffset = 50;\n    let component_id = 0;\n\n    for (const subDiagram of page.subDiagrams) {\n      switch (subDiagram.type) {\n        case 'array': {\n          drawArrayDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as ArrayDiagram,\n            yOffset,\n            config,\n            component_id\n          );\n          component_id += 1;\n          yOffset += 180; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'matrix': {\n          drawMatrixDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as MatrixDiagram,\n            yOffset,\n            config,\n            component_id\n          );\n          component_id += 1;\n          yOffset += 180; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'stack': {\n          drawStackDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as StackDiagram,\n            yOffset,\n            component_id\n          );\n          component_id += 1;\n          yOffset += 180; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'graph': {\n          drawGraphDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as GraphDiagram,\n            yOffset,\n            component_id\n          );\n          component_id += 1;\n          yOffset += 180; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'tree': {\n          drawTreeDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as TreeDiagram,\n            yOffset,\n            component_id\n          );\n          component_id += 1;\n          yOffset += 180; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'linkedList': {\n          drawLinkedListDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as LinkedListDiagram,\n            yOffset,\n            component_id\n          );\n          component_id += 1;\n          yOffset += 180; // Adjust the offset for next sub-diagram\n          break;\n        }\n        case 'text': {\n          drawTextDiagram(\n            pageGroup as unknown as SVG,\n            subDiagram as TextDiagram,\n            yOffset,\n            component_id\n          );\n          component_id += 1;\n          yOffset += 180; // Adjust the offset for next sub-diagram\n          break;\n        }\n        default:\n          throw new Error(`Unknown diagram type: ${subDiagram.type}`);\n      }\n    }\n  };\n\n  svg.attr('viewBox', `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n\n  pages.forEach((page, index) => {\n    drawPage(svg, page, index);\n  });\n\n  // // addNavigationButtons(svg, pages.length);\n\n  // renderPage(currentPage);\n\n  // // Inject page-switching logic directly into the SVG as JavaScript\n  // const switchPageScript = `\n  //   (function() {\n  //     const svg = document.getElementById('${id}');\n  //     let currentPage = 0;\n  //     const totalPages = ${pages.length};\n  //     let playInterval = null;\n\n  //     function renderPage(pageIndex) {\n  //       const pages = svg.querySelectorAll('g.page');\n  //       pages.forEach(page => {\n  //         page.style.display = 'none';\n  //       });\n  //       svg.querySelector('#page' + pageIndex).style.display = 'inline';\n\n  //       const prevButton = svg.querySelector('#prevButton');\n  //       const nextButton = svg.querySelector('#nextButton');\n\n  //       if (prevButton) prevButton.setAttribute('fill', pageIndex > 0 ? '#007bff' : '#c0c0c0');\n  //       if (nextButton) nextButton.setAttribute('fill', pageIndex < totalPages - 1 ? '#007bff' : '#c0c0c0');\n\n  //       // Update current page display\n  //       svg.querySelector('#pageIndicator').textContent = (pageIndex + 1) + ' / ' + totalPages;\n  //     }\n\n  //     svg.querySelector('#prevButtonGroup').addEventListener('click', function() {\n  //       if (currentPage > 0) {\n  //         currentPage -= 1;\n  //         renderPage(currentPage);\n  //       }\n  //     });\n\n  //     svg.querySelector('#nextButtonGroup').addEventListener('click', function() {\n  //       if (currentPage < totalPages - 1) {\n  //         currentPage += 1;\n  //         renderPage(currentPage);\n  //       }\n  //     });\n\n  //     svg.querySelector('#playButtonGroup').addEventListener('click', function() {\n  //       if (playInterval) {\n  //         clearInterval(playInterval);\n  //         playInterval = null;\n  //         svg.querySelector('#playButton text').textContent = '\u25B6';\n  //         svg.querySelector('#playButton').setAttribute('fill', '#007bff');\n  //       } else {\n  //         playInterval = setInterval(() => {\n  //           if (currentPage < totalPages - 1) {\n  //             currentPage += 1;\n  //           } else {\n  //             currentPage = 0;\n  //           }\n  //           renderPage(currentPage);\n  //         }, 1000);\n  //         svg.querySelector('#playButton text').textContent = '\u275A\u275A';\n  //         svg.querySelector('#playButton').setAttribute('fill', '#c0c0c0');\n  //       }\n  //     });\n\n  //     renderPage(currentPage);\n  //   })();\n  // `;\n\n  // svg.append('script').attr('type', 'text/javascript').text(switchPageScript);\n};\n\nexport const renderer: DiagramRenderer = { draw };\n", "import { log } from '../../logger.js';\n\nexport const styles = (options: any = {}) => {\n  log.debug({ options });\n  return `\n    .element {\n      font-size: ${options.array?.elementFontSize ?? '10px'};\n      fill: ${options.array?.valueColor ?? 'black'};\n    }\n    .element.index {\n      fill: ${options.array?.indexColor ?? 'black'};\n    }\n    .element {\n      stroke: ${options.array?.elementStrokeColor ?? 'black'};\n      stroke-width: ${options.array?.elementStrokeWidth ?? '1'};\n      fill: ${options.array?.elementFillColor ?? '#efefef'};\n    }\n  `;\n};\n\nexport default styles;\n", "import type { DiagramDefinition } from '../../diagram-api/types.js';\nimport { db } from './db.js';\nimport { parser } from './parser.js';\nimport { renderer } from './renderer.js';\nimport { styles } from './styles.js';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n};\n"],
  "mappings": "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",
  "names": ["defaultVisualData", "data", "DEFAULT_VISUAL_CONFIG", "defaultConfig_default", "getConfig", "__name", "cleanAndMerge", "getPages", "addPage", "page", "clear", "db", "setAccTitle", "getAccTitle", "setDiagramTitle", "getDiagramTitle", "getAccDescription", "setAccDescription", "populate", "__name", "ast", "populateCommonDb", "db", "page", "subDiagrams", "subDiagram", "e", "row", "element", "parser", "input", "parse", "log", "getColor", "__name", "color", "transparency", "isValidHexColor", "colorMap", "lowerColor", "hexColor", "hexToRgba", "hex", "alpha", "r", "g", "b", "drawArrayDiagram", "__name", "svg", "arrayDiagram", "yOffset", "config", "component_id", "titleFontSize", "title_X", "title_Y", "labelFontSize", "label_X", "label_Y", "group", "unit_id", "element", "index", "drawElement", "labelYPosition", "labelXPosition", "labelColor", "showIndex", "indexFontSize", "elementFontSize", "elementSize", "elementX", "elementY", "fillColor", "getColor", "arrowYStart", "arrowYEnd", "drawMatrixDiagram", "__name", "svg", "matrixDiagram", "yOffset", "config", "component_id", "titleOffset", "group", "rowCount", "colCount", "row", "rowIndex", "element", "colIndex", "drawElement", "drawGrid", "labelYPosition", "labelXPosition", "addIndices", "labelColor", "labelFontSize", "elementX", "elementY", "borderColor", "borderWidth", "fillColor", "getColor", "indexGroup", "gridGroup", "x", "y", "drawStackDiagram", "__name", "svg", "stackDiagram", "yOffset", "component_id", "group", "stackHeight", "drawFramework", "unit_id", "element", "index", "positionIndex", "drawElement", "labelYPosition", "elementX", "elementY", "fillColor", "getColor", "arrowXStart", "arrowXEnd", "x", "y", "width", "height", "borderColor", "drawGraphDiagram", "__name", "svg", "graphDiagram", "yOffset", "component_id", "group", "graphNodes", "ele", "hiddenNodeIds", "node", "visibleGraphNodes", "graphEdges", "nodePositions", "calculateNodePositions", "edge", "drawEdge", "unit_id", "drawNode", "labelYPosition", "nodes", "positions", "angleIncrement", "index", "angle", "position", "nodeX", "nodeY", "fillColor", "getColor", "arrowXStart", "arrowXEnd", "startNodePosition", "endNodePosition", "startX", "startY", "endX", "endY", "calculateEdgePosition", "strokeColor", "start", "end", "deltaX", "deltaY", "distance", "offsetX", "offsetY", "drawTreeDiagram", "__name", "svg", "treeDiagram", "yOffset", "component_id", "group", "treeNodes", "treeEdges", "calculateTreeEdges", "nodePositions", "calculateNodePositions", "edge", "drawEdge", "unit_id", "node", "drawNode", "labelYPosition", "nodes", "positions", "maxDepth", "calculateMaxDepth", "maxDistance", "currentY", "calculatePosition", "currentX", "depth", "adjustedSiblingDistance", "x", "leftChild", "n", "rightChild", "rootNode", "findDepth", "leftDepth", "rightDepth", "edges", "position", "nodeX", "nodeY", "fillColor", "getColor", "arrowXStart", "arrowXEnd", "startNodePosition", "endNodePosition", "startX", "startY", "endX", "endY", "calculateEdgePosition", "strokeColor", "start", "end", "deltaX", "deltaY", "distance", "offsetX", "offsetY", "drawLinkedListDiagram", "__name", "svg", "linkedListDiagram", "yOffset", "component_id", "group", "linkedListNodes", "nodePositions", "calculateNodePositions", "unit_id", "node", "index", "drawNode", "nodes", "positions", "_", "position", "hasNext", "nodeX", "nodeY", "fillColor", "getColor", "arrowYStart", "arrowYEnd", "drawTextDiagram", "__name", "svg", "textDiagram", "yOffset", "component_id", "group", "currentY", "unit_id", "element", "drawElement", "labelYPosition", "startY", "elementX", "lines", "line", "lineIndex", "lineY", "draw", "__name", "_text", "id", "_version", "diagram", "db", "config", "pages", "title", "svgHeight", "svgWidth", "svg", "selectSvgElement", "currentPage", "playInterval", "renderPage", "pageIndex", "drawPage", "page", "pageGroup", "yOffset", "component_id", "subDiagram", "drawArrayDiagram", "drawMatrixDiagram", "drawStackDiagram", "drawGraphDiagram", "drawTreeDiagram", "drawLinkedListDiagram", "drawTextDiagram", "configureSvgSize", "index", "renderer", "styles", "__name", "options", "log", "diagram", "parser", "db", "renderer", "styles"]
}
