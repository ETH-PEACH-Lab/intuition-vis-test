{
  "version": 3,
  "sources": ["../../../src/diagrams/matrix/db.ts", "../../../src/diagrams/matrix/parser.ts", "../../../src/diagrams/matrix/renderer.ts", "../../../src/diagrams/matrix/styles.ts", "../../../src/diagrams/matrix/diagram.ts"],
  "sourcesContent": ["import { getConfig as commonGetConfig } from '../../config.js';\nimport type { MatrixDiagramConfig } from '../../config.type.js';\nimport DEFAULT_CONFIG from '../../defaultConfig.js';\nimport { cleanAndMerge } from '../../utils.js';\nimport {\n  clear as commonClear,\n  getAccDescription,\n  getAccTitle,\n  getDiagramTitle,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle,\n} from '../common/commonDb.js';\nimport type { MatrixDB, MatrixData, MatrixRow } from './types.js';\n\nconst defaultMatrixData: MatrixData = {\n  rows: [],\n};\n\nlet data: MatrixData = structuredClone(defaultMatrixData);\n\nconst DEFAULT_MATRIX_CONFIG: Required<MatrixDiagramConfig> = DEFAULT_CONFIG.matrix;\n\nconst getConfig = (): Required<MatrixDiagramConfig> => {\n  return cleanAndMerge({\n    ...DEFAULT_MATRIX_CONFIG,\n    ...commonGetConfig().matrix,\n  });\n};\n\nconst getMatrix = (): MatrixRow[] => data.rows;\n\nconst addRow = (row: MatrixRow) => {\n  data.rows.push(row);\n};\n\nconst clear = () => {\n  commonClear();\n  data = structuredClone(defaultMatrixData);\n};\n\nexport const db: MatrixDB = {\n  addRow,\n  getMatrix,\n  getConfig,\n  clear,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n};\n", "import type { MatrixDiagram } from '@mermaid-js/parser';\nimport { parse } from '@mermaid-js/parser';\nimport type { ParserDefinition } from '../../diagram-api/types.js';\nimport { log } from '../../logger.js';\nimport { db } from './db.js';\nimport type { MatrixRow, MatrixElement as LocalMatrixElement } from './types.js';\n\nconst populate = (ast: MatrixDiagram) => {\n  for (const row of ast.rows) {\n    const elements: LocalMatrixElement[] = row.elements.map((e) => ({\n      value: e.value as string | number,\n      color: e.color as 'blue' | 'green' | 'red' | undefined,\n    }));\n    db.addRow({ elements });\n  }\n};\n\nexport const parser: ParserDefinition = {\n  parse: async (input: string): Promise<void> => {\n    const ast: MatrixDiagram = await parse('matrix', input);\n    log.debug(ast);\n    populate(ast);\n  },\n};\n", "import type { Diagram } from '../../Diagram.js';\nimport type { MatrixDiagramConfig } from '../../config.type.js';\nimport type { DiagramRenderer, DrawDefinition, Group, SVG } from '../../diagram-api/types.js';\nimport { selectSvgElement } from '../../rendering-util/selectSvgElement.js';\nimport { configureSvgSize } from '../../setupGraphViewbox.js';\nimport type { MatrixDB, MatrixRow, MatrixElement } from './types.js';\n\nconst draw: DrawDefinition = (_text, id, _version, diagram: Diagram) => {\n  const db = diagram.db as MatrixDB;\n  const config = db.getConfig();\n  const matrix = db.getMatrix();\n  const title = db.getDiagramTitle();\n  // cspell:ignore showindex\n  const showIndex = diagram.text.toLowerCase().includes('showindex'); // Check for showIndex in a case-insensitive manner\n  const svgHeight = 1600;\n  const svgWidth = 1600;\n  const svg: SVG = selectSvgElement(id);\n\n  svg.attr('viewbox', `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n\n  if (title) {\n    svg\n      .append('text')\n      .text(title)\n      .attr('x', svgWidth / 2)\n      .attr('y', 25)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'matrixTitle');\n  }\n\n  for (const [rowIndex, row] of matrix.entries()) {\n    for (const [colIndex, element] of row.elements.entries()) {\n      drawElement(svg, element, rowIndex, colIndex, config, showIndex);\n    }\n  }\n\n  if (showIndex) {\n    drawIndices(svg, matrix.length, matrix[0]?.elements.length || 0, config);\n  }\n};\n\nconst getColor = (color?: string): string => {\n  switch (color) {\n    case 'blue':\n      return 'rgba(0, 0, 255, 0.4)'; // Semi-transparent blue\n    case 'green':\n      return 'rgba(0, 255, 0, 0.4)'; // Semi-transparent green\n    case 'red':\n      return 'rgba(255, 0, 0, 0.4)'; // Semi-transparent red\n    default:\n      return 'none';\n  }\n};\n\nconst drawElement = (\n  svg: SVG,\n  element: MatrixElement,\n  rowIndex: number,\n  colIndex: number,\n  { borderColor, borderWidth, labelColor, labelFontSize }: Required<MatrixDiagramConfig>,\n  showIndex: boolean\n) => {\n  const group: Group = svg.append('g');\n  const elementX = colIndex * 50 + 50;\n  const elementY = rowIndex * 50 + 50;\n\n  const fillColor = getColor(element.color);\n\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', 50)\n    .attr('height', 50)\n    .style('fill', fillColor)\n    .attr('stroke', 'blue')\n    .attr('stroke-width', 1)\n    .attr('class', 'matrixElement');\n\n  group\n    .append('text')\n    .attr('x', elementX + 20)\n    .attr('y', elementY + 20)\n    .attr('fill', labelColor)\n    .attr('font-size', labelFontSize)\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value.toString());\n};\n\nconst drawIndices = (\n  svg: SVG,\n  rowCount: number,\n  colCount: number,\n  { labelColor, labelFontSize }: Required<MatrixDiagramConfig>\n) => {\n  // Draw row indices on the left\n  for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n    svg\n      .append('text')\n      .attr('x', 20)\n      .attr('y', rowIndex * 50 + 70)\n      .attr('fill', labelColor)\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'indexLabel')\n      .text(rowIndex.toString());\n  }\n\n  // Draw column indices at the bottom\n  for (let colIndex = 0; colIndex < colCount; colIndex++) {\n    svg\n      .append('text')\n      .attr('x', colIndex * 50 + 70)\n      .attr('y', rowCount * 50 + 70)\n      .attr('fill', labelColor)\n      .attr('font-size', labelFontSize)\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'indexLabel')\n      .text(colIndex.toString());\n  }\n};\n\nexport const renderer: DiagramRenderer = { draw };\n", "import { log } from '../../logger.js';\n\nexport const styles = (options: any = {}) => {\n  log.debug({ options });\n  return `\n    .element {\n      font-size: ${options.array?.elementFontSize ?? '10px'};\n      fill: ${options.array?.valueColor ?? 'black'};\n    }\n    .element.index {\n      fill: ${options.array?.indexColor ?? 'black'};\n    }\n    .element {\n      stroke: ${options.array?.elementStrokeColor ?? 'black'};\n      stroke-width: ${options.array?.elementStrokeWidth ?? '1'};\n      fill: ${options.array?.elementFillColor ?? '#efefef'};\n    }\n  `;\n};\n\nexport default styles;\n", "import type { DiagramDefinition } from '../../diagram-api/types.js';\nimport { db } from './db.js';\nimport { parser } from './parser.js';\nimport { renderer } from './renderer.js';\nimport { styles } from './styles.js';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n};\n"],
  "mappings": "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",
  "names": ["defaultMatrixData", "data", "DEFAULT_MATRIX_CONFIG", "defaultConfig_default", "getConfig", "__name", "cleanAndMerge", "getMatrix", "addRow", "row", "clear", "db", "setAccTitle", "getAccTitle", "setDiagramTitle", "getDiagramTitle", "getAccDescription", "setAccDescription", "populate", "__name", "ast", "row", "elements", "e", "db", "parser", "input", "parse", "log", "draw", "__name", "_text", "id", "_version", "diagram", "db", "config", "matrix", "title", "showIndex", "svgHeight", "svgWidth", "svg", "selectSvgElement", "configureSvgSize", "rowIndex", "row", "colIndex", "element", "drawElement", "drawIndices", "getColor", "color", "borderColor", "borderWidth", "labelColor", "labelFontSize", "group", "elementX", "elementY", "fillColor", "rowCount", "colCount", "renderer", "styles", "__name", "options", "log", "diagram", "parser", "db", "renderer", "styles"]
}
