{
  "version": 3,
  "sources": ["../../../src/diagrams/class/classRenderer-v2.ts", "../../../src/diagrams/class/classDiagram-v2.ts"],
  "sourcesContent": ["// @ts-nocheck - don't check until handle it\nimport { select, curveLinear } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger.js';\nimport { getConfig } from '../../diagram-api/diagramAPI.js';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils, { getEdgeId } from '../../utils.js';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils.js';\nimport { setupGraphViewbox } from '../../setupGraphViewbox.js';\nimport common from '../common/common.js';\nimport type { ClassRelation, ClassNote, ClassMap, NamespaceMap } from './classTypes.js';\nimport type { EdgeData } from '../../types.js';\n\nconst sanitizeText = (txt: string) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: undefined,\n};\n\ninterface RectParameters {\n  id: string;\n  shape: 'rect';\n  labelStyle: string;\n  domId: string;\n  labelText: string;\n  padding: number | undefined;\n  style?: string;\n}\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param namespaces - Object containing the vertices.\n * @param g - The graph that is to be drawn.\n * @param _id - id of the graph\n * @param diagObj - The diagram object\n */\nexport const addNamespaces = function (\n  namespaces: NamespaceMap,\n  g: graphlib.Graph,\n  _id: string,\n  diagObj: any\n) {\n  log.info('keys:', [...namespaces.keys()]);\n  log.info(namespaces);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  namespaces.forEach(function (vertex) {\n    // parent node must be one of [rect, roundedWithTitle, noteGroup, divider]\n    const shape = 'rect';\n\n    const node: RectParameters = {\n      shape: shape,\n      id: vertex.id,\n      domId: vertex.domId,\n      labelText: sanitizeText(vertex.id),\n      labelStyle: '',\n      style: 'fill: none; stroke: black',\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n\n    g.setNode(vertex.id, node);\n    addClasses(vertex.classes, g, _id, diagObj, vertex.id);\n\n    log.info('setNode', node);\n  });\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param classes - Object containing the vertices.\n * @param g - The graph that is to be drawn.\n * @param _id - id of the graph\n * @param diagObj - The diagram object\n * @param parent - id of the parent namespace, if it exists\n */\nexport const addClasses = function (\n  classes: ClassMap,\n  g: graphlib.Graph,\n  _id: string,\n  diagObj: any,\n  parent?: string\n) {\n  log.info('keys:', [...classes.keys()]);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  [...classes.values()]\n    .filter((vertex) => vertex.parent === parent)\n    .forEach(function (vertex) {\n      /**\n       * Variable for storing the classes for the vertex\n       */\n      const cssClassStr = vertex.cssClasses.join(' ');\n\n      const styles = getStylesFromArray(vertex.styles);\n\n      // Use vertex id as text in the box if no text is provided by the graph definition\n      const vertexText = vertex.label ?? vertex.id;\n      const radius = 0;\n      const shape = 'class_box';\n\n      // Add the node\n      const node = {\n        labelStyle: styles.labelStyle,\n        shape: shape,\n        labelText: sanitizeText(vertexText),\n        classData: vertex,\n        rx: radius,\n        ry: radius,\n        class: cssClassStr,\n        style: styles.style,\n        id: vertex.id,\n        domId: vertex.domId,\n        tooltip: diagObj.db.getTooltip(vertex.id, parent) || '',\n        haveCallback: vertex.haveCallback,\n        link: vertex.link,\n        width: vertex.type === 'group' ? 500 : undefined,\n        type: vertex.type,\n        // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n        padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n      };\n      g.setNode(vertex.id, node);\n\n      if (parent) {\n        g.setParent(vertex.id, parent);\n      }\n\n      log.info('setNode', node);\n    });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param notes - Object containing the additional vertices (notes).\n * @param g - The graph that is to be drawn.\n * @param startEdgeId - starting index for note edge\n * @param classes - Classes\n */\nexport const addNotes = function (\n  notes: ClassNote[],\n  g: graphlib.Graph,\n  startEdgeId: number,\n  classes: ClassMap\n) {\n  log.info(notes);\n\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    const cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    const vertexText = vertex.text;\n\n    const radius = 0;\n    const shape = 'note';\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n\n    if (!vertex.class || !classes.has(vertex.class)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n\n    const edgeData: EdgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: 'dotted',\n      // Set link type for rendering\n      arrowhead: 'none',\n      //Set edge extra labels\n      startLabelRight: '',\n      endLabelLeft: '',\n      //Set relation arrow types\n      arrowTypeStart: 'none',\n      arrowTypeEnd: 'none',\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf.curve, curveLinear),\n    };\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations -\n * @param g - The graph object\n */\nexport const addRelations = function (relations: ClassRelation[], g: graphlib.Graph) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData: EdgeData = {\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: edge.relation.lineType == 1 ? 'dashed' : 'solid',\n      id: getEdgeId(edge.id1, edge.id2, {\n        prefix: 'id',\n        counter: cnt,\n      }),\n      // Set link type for rendering\n      arrowhead: edge.type === 'arrow_open' ? 'none' : 'normal',\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === 'none' ? '' : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === 'none' ? '' : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf?.curve, curveLinear),\n    };\n\n    log.info(edgeData, edge);\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      edgeData.style = styles.style;\n      edgeData.labelStyle = styles.labelStyle;\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      if (getConfig().flowchart?.htmlLabels ?? getConfig().htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param cnf - Config to merge\n */\nexport const setConf = function (cnf: any) {\n  conf = {\n    ...conf,\n    ...cnf,\n  };\n};\n\n/**\n * Draws a class diagram in the tag with id: id based on the definition in text.\n *\n * @param text -\n * @param id -\n * @param _version -\n * @param diagObj -\n */\nexport const draw = async function (text: string, id: string, _version: string, diagObj: any) {\n  log.info('Drawing class - ', id);\n\n  // TODO V10: Why flowchart? Might be a mistake when copying.\n  const conf = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf?.nodeSpacing ?? 50;\n  const rankSpacing = conf?.rankSpacing ?? 50;\n\n  // Create the input mermaid.graph\n  const g: graphlib.Graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const namespaces: NamespaceMap = diagObj.db.getNamespaces();\n  const classes: ClassMap = diagObj.db.getClasses();\n  const relations: ClassRelation[] = diagObj.db.getRelations();\n  const notes: ClassNote[] = diagObj.db.getNotes();\n  log.info(relations);\n  addNamespaces(namespaces, g, id, diagObj);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement!.nodes()[0]!.contentDocument.body)\n      : select('body');\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  const element = root.select('#' + id + ' g');\n  await render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf?.titleTopMargin ?? 5, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf?.diagramPadding, conf?.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf?.htmlLabels) {\n    const doc =\n      securityLevel === 'sandbox' ? sandboxElement!.nodes()[0]!.contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param type - The type to look for\n * @returns The arrow marker\n */\nfunction getArrowMarker(type: number) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n", "import type { DiagramDefinition } from '../../diagram-api/types.js';\n// @ts-ignore: JISON doesn't support types\nimport parser from './parser/classDiagram.jison';\nimport db from './classDb.js';\nimport styles from './styles.js';\nimport renderer from './classRenderer-v2.js';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],
  "mappings": "uiBAaA,IAAMA,EAAeC,EAACC,GAAgBC,EAAO,aAAaD,EAAKE,EAAU,CAAC,EAArD,gBAEjBC,EAAO,CACT,cAAe,GACf,QAAS,EACT,WAAY,GACZ,MAAO,MACT,EAoBaC,EAAgBL,EAAA,SAC3BM,EACAC,EACAC,EACAC,EACA,CACAC,EAAI,KAAK,QAAS,CAAC,GAAGJ,EAAW,KAAK,CAAC,CAAC,EACxCI,EAAI,KAAKJ,CAAU,EAGnBA,EAAW,QAAQ,SAAUK,EAAQ,CAInC,IAAMC,EAAuB,CAC3B,MAHY,OAIZ,GAAID,EAAO,GACX,MAAOA,EAAO,MACd,UAAWZ,EAAaY,EAAO,EAAE,EACjC,WAAY,GACZ,MAAO,4BAEP,QAASR,EAAU,EAAE,WAAW,SAAWA,EAAU,EAAE,OAAO,OAChE,EAEAI,EAAE,QAAQI,EAAO,GAAIC,CAAI,EACzBC,EAAWF,EAAO,QAASJ,EAAGC,EAAKC,EAASE,EAAO,EAAE,EAErDD,EAAI,KAAK,UAAWE,CAAI,CAC1B,CAAC,CACH,EA9B6B,iBAyChBC,EAAab,EAAA,SACxBc,EACAP,EACAC,EACAC,EACAM,EACA,CACAL,EAAI,KAAK,QAAS,CAAC,GAAGI,EAAQ,KAAK,CAAC,CAAC,EACrCJ,EAAI,KAAKI,CAAO,EAGhB,CAAC,GAAGA,EAAQ,OAAO,CAAC,EACjB,OAAQH,GAAWA,EAAO,SAAWI,CAAM,EAC3C,QAAQ,SAAUJ,EAAQ,CAIzB,IAAMK,EAAcL,EAAO,WAAW,KAAK,GAAG,EAExCM,EAASC,EAAmBP,EAAO,MAAM,EAGzCQ,EAAaR,EAAO,OAASA,EAAO,GACpCS,EAAS,EAITR,EAAO,CACX,WAAYK,EAAO,WACnB,MALY,YAMZ,UAAWlB,EAAaoB,CAAU,EAClC,UAAWR,EACX,GAAIS,EACJ,GAAIA,EACJ,MAAOJ,EACP,MAAOC,EAAO,MACd,GAAIN,EAAO,GACX,MAAOA,EAAO,MACd,QAASF,EAAQ,GAAG,WAAWE,EAAO,GAAII,CAAM,GAAK,GACrD,aAAcJ,EAAO,aACrB,KAAMA,EAAO,KACb,MAAOA,EAAO,OAAS,QAAU,IAAM,OACvC,KAAMA,EAAO,KAEb,QAASR,EAAU,EAAE,WAAW,SAAWA,EAAU,EAAE,OAAO,OAChE,EACAI,EAAE,QAAQI,EAAO,GAAIC,CAAI,EAErBG,GACFR,EAAE,UAAUI,EAAO,GAAII,CAAM,EAG/BL,EAAI,KAAK,UAAWE,CAAI,CAC1B,CAAC,CACL,EAtD0B,cAgEbS,EAAWrB,EAAA,SACtBsB,EACAf,EACAgB,EACAT,EACA,CACAJ,EAAI,KAAKY,CAAK,EAEdA,EAAM,QAAQ,SAAUE,EAAMC,EAAG,CAC/B,IAAMd,EAASa,EAETE,EAAa,GAEbT,EAAS,CAAE,WAAY,GAAI,MAAO,EAAG,EAErCE,EAAaR,EAAO,KAEpBS,EAAS,EAETR,EAAO,CACX,WAAYK,EAAO,WACnB,MAHY,OAIZ,UAAWlB,EAAaoB,CAAU,EAClC,SAAUR,EACV,GAAIS,EACJ,GAAIA,EACJ,MAAOM,EACP,MAAOT,EAAO,MACd,GAAIN,EAAO,GACX,MAAOA,EAAO,GACd,QAAS,GACT,KAAM,OAEN,QAASR,EAAU,EAAE,WAAW,SAAWA,EAAU,EAAE,OAAO,OAChE,EAIA,GAHAI,EAAE,QAAQI,EAAO,GAAIC,CAAI,EACzBF,EAAI,KAAK,UAAWE,CAAI,EAEpB,CAACD,EAAO,OAAS,CAACG,EAAQ,IAAIH,EAAO,KAAK,EAC5C,OAEF,IAAMgB,EAASJ,EAAcE,EAEvBG,EAAqB,CACzB,GAAI,WAAWD,CAAM,GAErB,QAAS,WACT,QAAS,SAET,UAAW,OAEX,gBAAiB,GACjB,aAAc,GAEd,eAAgB,OAChB,aAAc,OACd,MAAO,YACP,WAAY,GACZ,MAAOE,EAAmBzB,EAAK,MAAO0B,CAAW,CACnD,EAGAvB,EAAE,QAAQI,EAAO,GAAIA,EAAO,MAAOiB,EAAUD,CAAM,CACrD,CAAC,CACH,EAhEwB,YAwEXI,EAAe/B,EAAA,SAAUgC,EAA4BzB,EAAmB,CACnF,IAAMH,EAAOD,EAAU,EAAE,UACrB8B,EAAM,EAEVD,EAAU,QAAQ,SAAUE,EAAM,CAChCD,IACA,IAAML,EAAqB,CAEzB,QAAS,WACT,QAASM,EAAK,SAAS,UAAY,EAAI,SAAW,QAClD,GAAIC,EAAUD,EAAK,IAAKA,EAAK,IAAK,CAChC,OAAQ,KACR,QAASD,CACX,CAAC,EAED,UAAWC,EAAK,OAAS,aAAe,OAAS,SAEjD,gBAAiBA,EAAK,iBAAmB,OAAS,GAAKA,EAAK,eAC5D,aAAcA,EAAK,iBAAmB,OAAS,GAAKA,EAAK,eAEzD,eAAgBE,EAAeF,EAAK,SAAS,KAAK,EAClD,aAAcE,EAAeF,EAAK,SAAS,KAAK,EAChD,MAAO,YACP,WAAY,GACZ,MAAOL,EAAmBzB,GAAM,MAAO0B,CAAW,CACpD,EAIA,GAFApB,EAAI,KAAKkB,EAAUM,CAAI,EAEnBA,EAAK,QAAU,OAAW,CAC5B,IAAMjB,EAASC,EAAmBgB,EAAK,KAAK,EAC5CN,EAAS,MAAQX,EAAO,MACxBW,EAAS,WAAaX,EAAO,UAC/B,CAEAiB,EAAK,KAAOA,EAAK,MACbA,EAAK,OAAS,OACZA,EAAK,QAAU,SACjBN,EAAS,eAAiB,eAG5BA,EAAS,eAAiB,aAC1BA,EAAS,SAAW,IAGhBzB,EAAU,EAAE,WAAW,YAAcA,EAAU,EAAE,YACnDyB,EAAS,UAAY,OACrBA,EAAS,MAAQ,2BAA6BM,EAAK,KAAO,YAE1DN,EAAS,UAAY,OACrBA,EAAS,MAAQM,EAAK,KAAK,QAAQhC,EAAO,eAAgB;AAAA,CAAI,EAE1DgC,EAAK,QAAU,SACjBN,EAAS,MAAQA,EAAS,OAAS,+CAGrCA,EAAS,WAAaA,EAAS,WAAW,QAAQ,SAAU,OAAO,IAIvErB,EAAE,QAAQ2B,EAAK,IAAKA,EAAK,IAAKN,EAAUK,CAAG,CAC7C,CAAC,CACH,EA9D4B,gBAqEfI,EAAUrC,EAAA,SAAUsC,EAAU,CACzClC,EAAO,CACL,GAAGA,EACH,GAAGkC,CACL,CACF,EALuB,WAeVC,EAAOvC,EAAA,eAAgBwC,EAAcC,EAAYC,EAAkBjC,EAAc,CAC5FC,EAAI,KAAK,mBAAoB+B,CAAE,EAG/B,IAAMrC,EAAOD,EAAU,EAAE,WAAaA,EAAU,EAAE,MAC5CwC,EAAgBxC,EAAU,EAAE,cAClCO,EAAI,KAAK,UAAWN,CAAI,EACxB,IAAMwC,EAAcxC,GAAM,aAAe,GACnCyC,EAAczC,GAAM,aAAe,GAGnCG,EAAoB,IAAauC,EAAM,CAC3C,WAAY,GACZ,SAAU,EACZ,CAAC,EACE,SAAS,CACR,QAASrC,EAAQ,GAAG,aAAa,EACjC,QAASmC,EACT,QAASC,EACT,QAAS,EACT,QAAS,CACX,CAAC,EACA,oBAAoB,UAAY,CAC/B,MAAO,CAAC,CACV,CAAC,EAGGvC,EAA2BG,EAAQ,GAAG,cAAc,EACpDK,EAAoBL,EAAQ,GAAG,WAAW,EAC1CuB,EAA6BvB,EAAQ,GAAG,aAAa,EACrDa,EAAqBb,EAAQ,GAAG,SAAS,EAC/CC,EAAI,KAAKsB,CAAS,EAClB3B,EAAcC,EAAYC,EAAGkC,EAAIhC,CAAO,EACxCI,EAAWC,EAASP,EAAGkC,EAAIhC,CAAO,EAClCsB,EAAaC,EAAWzB,CAAC,EACzBc,EAASC,EAAOf,EAAGyB,EAAU,OAAS,EAAGlB,CAAO,EAGhD,IAAIiC,EACAJ,IAAkB,YACpBI,EAAiBC,EAAO,KAAOP,CAAE,GAEnC,IAAMQ,EACJN,IAAkB,UACdK,EAAOD,EAAgB,MAAM,EAAE,CAAC,EAAG,gBAAgB,IAAI,EACvDC,EAAO,MAAM,EACbE,EAAMD,EAAK,OAAO,QAAQR,CAAE,IAAI,EAGhCU,EAAUF,EAAK,OAAO,IAAMR,EAAK,IAAI,EAc3C,GAbA,MAAMW,EACJD,EACA5C,EACA,CAAC,cAAe,YAAa,cAAe,aAAc,UAAU,EACpE,eACAkC,CACF,EAEAY,EAAM,YAAYH,EAAK,iBAAkB9C,GAAM,gBAAkB,EAAGK,EAAQ,GAAG,gBAAgB,CAAC,EAEhG6C,EAAkB/C,EAAG2C,EAAK9C,GAAM,eAAgBA,GAAM,WAAW,EAG7D,CAACA,GAAM,WAAY,CACrB,IAAMmD,EACJZ,IAAkB,UAAYI,EAAgB,MAAM,EAAE,CAAC,EAAG,gBAAkB,SACxES,EAASD,EAAI,iBAAiB,QAAUd,EAAK,sBAAsB,EACzE,QAAWgB,KAASD,EAAQ,CAE1B,IAAME,EAAMD,EAAM,QAAQ,EAEpBE,EAAOJ,EAAI,gBAAgB,6BAA8B,MAAM,EACrEI,EAAK,aAAa,KAAM,CAAC,EACzBA,EAAK,aAAa,KAAM,CAAC,EACzBA,EAAK,aAAa,QAASD,EAAI,KAAK,EACpCC,EAAK,aAAa,SAAUD,EAAI,MAAM,EAEtCD,EAAM,aAAaE,EAAMF,EAAM,UAAU,CAC3C,CACF,CACF,EAhFoB,QAwFpB,SAASrB,EAAewB,EAAc,CACpC,IAAIC,EACJ,OAAQD,EAAM,CACZ,IAAK,GACHC,EAAS,cACT,MACF,IAAK,GACHA,EAAS,YACT,MACF,IAAK,GACHA,EAAS,cACT,MACF,IAAK,GACHA,EAAS,aACT,MACF,IAAK,GACHA,EAAS,WACT,MACF,QACEA,EAAS,MACb,CACA,OAAOA,CACT,CAtBS7D,EAAAoC,EAAA,kBAwBT,IAAO0B,EAAQ,CACb,QAAAzB,EACA,KAAAE,CACF,ECzZO,IAAMwB,GAA6B,CACxC,OAAAC,EACA,GAAAC,EACA,SAAAC,EACA,OAAAC,EACA,KAAOC,GAAQ,CACRA,EAAI,QACPA,EAAI,MAAQ,CAAC,GAEfA,EAAI,MAAM,oBAAsBA,EAAI,oBACpCH,EAAG,MAAM,CACX,CACF",
  "names": ["sanitizeText", "__name", "txt", "common_default", "getConfig", "conf", "addNamespaces", "namespaces", "g", "_id", "diagObj", "log", "vertex", "node", "addClasses", "classes", "parent", "cssClassStr", "styles", "getStylesFromArray", "vertexText", "radius", "addNotes", "notes", "startEdgeId", "note", "i", "cssNoteStr", "edgeId", "edgeData", "interpolateToCurve", "linear_default", "addRelations", "relations", "cnt", "edge", "getEdgeId", "getArrowMarker", "setConf", "cnf", "draw", "text", "id", "_version", "securityLevel", "nodeSpacing", "rankSpacing", "Graph", "sandboxElement", "select_default", "root", "svg", "element", "render", "utils_default", "setupGraphViewbox", "doc", "labels", "label", "dim", "rect", "type", "marker", "classRenderer_v2_default", "diagram", "classDiagram_default", "classDb_default", "classRenderer_v2_default", "styles_default", "cnf"]
}
