/******************************************************************************
 * This file was generated by langium-cli 3.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const VisualEditorTerminals = {
    ID: /[_a-zA-Z][_a-zA-Z0-9]*/,
    INT: /[0-9]+/,
};

export type ArrayElement = Repeat | SimpleArray;

export const ArrayElement = 'ArrayElement';

export function isArrayElement(item: unknown): item is ArrayElement {
    return reflection.isInstance(item, ArrayElement);
}

export type Definition = ArrayDef | LinkedListDef | MatrixDef | StackDef;

export const Definition = 'Definition';

export function isDefinition(item: unknown): item is Definition {
    return reflection.isInstance(item, Definition);
}

export type MatrixElement = Repeat | SimpleMatrix;

export const MatrixElement = 'MatrixElement';

export function isMatrixElement(item: unknown): item is MatrixElement {
    return reflection.isInstance(item, MatrixElement);
}

export interface ArrayDef extends AstNode {
    readonly $container: Data;
    readonly $type: 'ArrayDef';
    elements: Array<ArrayElement>;
    name: string;
    type: 'array';
}

export const ArrayDef = 'ArrayDef';

export function isArrayDef(item: unknown): item is ArrayDef {
    return reflection.isInstance(item, ArrayDef);
}

export interface Data extends AstNode {
    readonly $type: 'Data';
    definitions: Array<Definition>;
}

export const Data = 'Data';

export function isData(item: unknown): item is Data {
    return reflection.isInstance(item, Data);
}

export interface LinkedListDef extends AstNode {
    readonly $container: Data;
    readonly $type: 'LinkedListDef';
    elements: Array<ArrayElement>;
    name: string;
    type: 'linkedlist';
}

export const LinkedListDef = 'LinkedListDef';

export function isLinkedListDef(item: unknown): item is LinkedListDef {
    return reflection.isInstance(item, LinkedListDef);
}

export interface MatrixDef extends AstNode {
    readonly $container: Data;
    readonly $type: 'MatrixDef';
    elements: Array<MatrixElement>;
    name: string;
    type: 'matrix';
}

export const MatrixDef = 'MatrixDef';

export function isMatrixDef(item: unknown): item is MatrixDef {
    return reflection.isInstance(item, MatrixDef);
}

export interface Repeat extends AstNode {
    readonly $container: ArrayDef | LinkedListDef | MatrixDef | StackDef;
    readonly $type: 'Repeat';
    repeat: '*';
}

export const Repeat = 'Repeat';

export function isRepeat(item: unknown): item is Repeat {
    return reflection.isInstance(item, Repeat);
}

export interface SimpleArray extends AstNode {
    readonly $container: ArrayDef | LinkedListDef | SimpleMatrix | StackDef;
    readonly $type: 'SimpleArray';
    values: Array<string>;
}

export const SimpleArray = 'SimpleArray';

export function isSimpleArray(item: unknown): item is SimpleArray {
    return reflection.isInstance(item, SimpleArray);
}

export interface SimpleMatrix extends AstNode {
    readonly $container: MatrixDef;
    readonly $type: 'SimpleMatrix';
    rows: Array<SimpleArray>;
}

export const SimpleMatrix = 'SimpleMatrix';

export function isSimpleMatrix(item: unknown): item is SimpleMatrix {
    return reflection.isInstance(item, SimpleMatrix);
}

export interface StackDef extends AstNode {
    readonly $container: Data;
    readonly $type: 'StackDef';
    elements: Array<ArrayElement>;
    name: string;
    type: 'stack';
}

export const StackDef = 'StackDef';

export function isStackDef(item: unknown): item is StackDef {
    return reflection.isInstance(item, StackDef);
}

export type VisualEditorAstType = {
    ArrayDef: ArrayDef
    ArrayElement: ArrayElement
    Data: Data
    Definition: Definition
    LinkedListDef: LinkedListDef
    MatrixDef: MatrixDef
    MatrixElement: MatrixElement
    Repeat: Repeat
    SimpleArray: SimpleArray
    SimpleMatrix: SimpleMatrix
    StackDef: StackDef
}

export class VisualEditorAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [ArrayDef, ArrayElement, Data, Definition, LinkedListDef, MatrixDef, MatrixElement, Repeat, SimpleArray, SimpleMatrix, StackDef];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case ArrayDef:
            case LinkedListDef:
            case MatrixDef:
            case StackDef: {
                return this.isSubtype(Definition, supertype);
            }
            case Repeat: {
                return this.isSubtype(ArrayElement, supertype) || this.isSubtype(MatrixElement, supertype);
            }
            case SimpleArray: {
                return this.isSubtype(ArrayElement, supertype);
            }
            case SimpleMatrix: {
                return this.isSubtype(MatrixElement, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case ArrayDef: {
                return {
                    name: ArrayDef,
                    properties: [
                        { name: 'elements', defaultValue: [] },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case Data: {
                return {
                    name: Data,
                    properties: [
                        { name: 'definitions', defaultValue: [] }
                    ]
                };
            }
            case LinkedListDef: {
                return {
                    name: LinkedListDef,
                    properties: [
                        { name: 'elements', defaultValue: [] },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case MatrixDef: {
                return {
                    name: MatrixDef,
                    properties: [
                        { name: 'elements', defaultValue: [] },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case Repeat: {
                return {
                    name: Repeat,
                    properties: [
                        { name: 'repeat' }
                    ]
                };
            }
            case SimpleArray: {
                return {
                    name: SimpleArray,
                    properties: [
                        { name: 'values', defaultValue: [] }
                    ]
                };
            }
            case SimpleMatrix: {
                return {
                    name: SimpleMatrix,
                    properties: [
                        { name: 'rows', defaultValue: [] }
                    ]
                };
            }
            case StackDef: {
                return {
                    name: StackDef,
                    properties: [
                        { name: 'elements', defaultValue: [] },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new VisualEditorAstReflection();
